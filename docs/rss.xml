<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>MGTnote</title><link>https://692.cloudns.be</link><description>My good time-我的好时光！</description><copyright>MGTnote</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>avatar.svg</url><title>avatar</title><link>https://692.cloudns.be</link></image><lastBuildDate>Wed, 26 Mar 2025 12:46:34 +0000</lastBuildDate><managingEditor>MGTnote</managingEditor><ttl>60</ttl><webMaster>MGTnote</webMaster><item><title>如何使用 Chrome 作为代码编辑器和调试器 </title><link>https://692.cloudns.be/post/ru-he-shi-yong-%20Chrome%20-zuo-wei-dai-ma-bian-ji-qi-he-diao-shi-qi-%20.html</link><description>很少有开发人员深入研究浏览器的“ DevTools”。这里有一系列复杂的功能，甚至已经到了可以使用 Chrome 作为完整开发环境的地步。虽然你不太可能会为此放弃使用 VSCode 或 Sublime，但如果你在使用别人的电脑或仅需要编辑一两行代码时，DevTools至少可以作为一种选择。

以下部分将介绍如何使用 Chrome 的编辑和调试工具（Chromium、 Edge、 Opera等浏览器也使用了相同的内核引擎和开发工具）。根据你的浏览器和操作系统，你可以从菜单中打开 DevTools: 按 F12，或者按 Ctrl | Cmd + Shift + i。 Safari 和 Firefox 会有些不同，它们可能不提供相同的编辑功能，但是它们也有自己的技巧来帮助开发。

## 在任何网站上进行快速编辑

当在本地开发或线上站点上查看页面时，**Elements**(元素) 面板允许你检查、禁用、启用、添加、编辑或删除任何 CSS 选择器和属性:

![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8cbda7e2a4204690a0662a2bcaab2a37~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp) **Source**(源代码) 面板允许你选中**Page**(网页) 窗口中的css或JavaScript文件，然后在右侧的源码面板中去编辑它们的内容。

![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3664999f11964e9e95f17d7a393d5cc8~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp)

按 `Ctrl | Cmd + S` 保存文件修改，但要注意它只是保存到内存中，黄色警告图标表示更改不是永久性的。

如果你的代码开启了**Source Map**(源码映射)，你可以打开“ files”(参见上面的 src 文件夹) ，但是更改不会应用到当前页面。你也可以通过单击{}图标来美化压缩后的代码。

一旦关闭或刷新页面，你将丢失所有变更。不过**Changes**(变更) 面板可以记录当前的变更。你可以从抽屉面板左侧的“···”菜单或主菜单的更多工具中找到:

![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ae47766bce8c4fe097598d5edd901d36~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp)

从**Changes**(变更)面板中保存代码是不可以的，但它允许你定位所有修改过的文件。右键单击文件夹窗口中的任何文件，可以选择“另存为”下载本地副本并将其导入到项目中。

## 覆盖任何网站上的文件

你可以替换本地开发或线上站点上的任何文件。首先，在**Source**(源代码)面板中选择**Overrides**(替换)窗口，然后单击“ + 选择放置替换项的文件夹”:

![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1be975ee788f401e842f9276b4396b97~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp)

选择你系统里的一个目录，然后单击“允许”，这样 Chrome 就可以对其进行写入操作了。

返回“**Page**”(网页)面板，然后右键单击任意一个文件并选择“保存并覆盖”:

![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7ce5d73210d3402daba8246553037e05~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp)

这会将文件保存到本地的文件夹中。紫色圆圈表示当前文件在本地磁盘上:

![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/795a8f9878c6428d8b19e738182b1cb5~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp)

你可以按{}来美化压缩后的代码并进行更改。更改会立即生效，而且因为文件是在本地保存的，所以每当 DevTools 打开时，该域名的所有页面都会重新应用这些更改(它不会影响除你之外的任何人的站点)。

**Changes**(变更)面板仍然会显示修改前后的差异，你也可以将编辑后的文件复制到源代码中。请记住，你正在编辑的是最终打包之后的文件，可能需要对打包前的源文件也应用更改。

## 编辑源代码

你可以使用 Chrome 作为本地源文件的文本编辑器，不管你使用的是什么系统。它提供了大多数编辑器的基本功能，如行号、撤销/重做、颜色编码和自动补全。首先，选择**Sources**(源代码)面板中的“文件系统”窗口，然后单击“ + 向工作区添加文件夹”:

![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/46905e309f614a18a23046caed263bd3~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp)

选择当前项目对应的本地开发目录，然后单击“允许”，这样 Chrome 就有权对该文件夹进行读写操作。你现在可以像在编辑器中一样打开和编辑任何文件:

![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f21659163489446682c247d0892233a1~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp)

## 使用控制台面板进行调试

| console方法 | 描述 |
| --- | --- |
| `.log(msg)` | 向控制台输出消息 |
| `.dir(obj,opt)` | 美化打印对象和属性 |
| `.table(obj)` | 以表格格式输出数组和对象 |
| `.error(msg)` | 输出错误消息 |
| `.count(label)` | 以参数为标识记录调用的次数，调用时在控制台打印标识以及调用次数。 |
| `.countReset[label]` | 重置指定标签的计数器值。 |
| `.group(label)` | 创建一个新的内联 group, 后续所有打印内容将会以子层级的形式展示。调用 `groupEnd()`来闭合组。 |
| `.groupEnd(label)` | 结束缩进组 |
| `.time(label)` | 启动计时器来计算操作的持续时间 |
| `.timeLog(label)` | 报告自计时器启动以来的运行时间 |
| `.timeEnd(label)` | 停止计时器并报告总持续时间 |
| `.trace()` | 输出堆栈跟踪(所有调用函数的列表) |
| `.clear()` | 清空控制台 |

`console.log()`也接受用逗号分割来显示多个值，例如:

```ini
let x = 321;
console.log('x:', x);
// x: 321
```

es6解构提供了类似的输出方式：

```arduino
console.log({ x });
// { x: 321 }
```

`console.dir()`可以将复杂对象输出到任意属性深度，无论是否使用颜色编码:

```php
console.dir(obj, { depth: null, color: true });
```

## 调试客户端应用

你可以从 **Source**(源代码) 面板打开一个 JavaScript 文件，然后单击任意行号来设置断点(用蓝色标记表示)。注意，你还可以在**Source Map**(源码映射)中选择文件并添加断点，这样看起来会更直观。

代码运行到断点处会暂停执行，以便你可以检查程序的状态。可以定义任意数量的断点，只需将它们设置为要开始调试的位置。

运行代码(可通过刷新页面或激活事件触发器) ，代码将在断点位置停止:

![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1dcd4c50f8124ed4ab26cb65424008ce~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp)

右边的展板包括:

+   一个(**Watch**)监视窗口，可以通过单击 + 图标并输入特定变量的名称来监视这些变量
+   一个包含所有断点的(**Breakpoints**)断点窗口，并允许你启用或禁用任意断点
+   **Scope**(作用域)窗口显示所有局部和全局变量的状态，并且可以右键复制“属性路径”，在控制台进行输出
+   **Call Stack**(调用堆栈)窗口列出了断点位置代码执行的相关堆栈信息。

当断点位置被触发时，会有一行图标出现在“已在断点暂停”消息的上方:

![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e9fc41889c3c4ada90bbc6e08fd1e6ea~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp)

从左到右，图标执行以下操作:

0.  恢复执行：继续处理，直到下一个断点或代码终止
1.  **step over** 单步执行，不进入函数：执行下一个命令，但保持在当前函数中，不要跳转到它调用的任何函数中
2.  **step into** 单步执行，进入函数：执行下一个命令并跳转到它调用的函数
3.  **step out** 单步执行，跳出函数：继续处理到函数结束并返回到调用语句
4.  **step** 单步执行：类似于 **step into**，只是它不会跳转到异步函数
5.  停用所有断点：如果你希望临时运行代码而不中断，但又不想丢失断点，这种方法非常有用
6.  异常暂停: 引发错误时停止处理。

DevTools 提供了多个调试选项。除了手动定义断点之外，还可以向代码中添加`debugger`语句。这将在 DevTools 打开时被激活，因此你应该将其从生产环境代码中删除。

![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/adbc12e224324a399d5cf6b9f8429e3a~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?)

**条件断点**是在停止执行前，触发一个条件语句。假设你有一个从0到999的循环，并且需要在最后一次迭代中查看状态。与添加标准断点并单击恢复执行999次不同，你可以右键单击行号，选择“添加条件断点”，然后输入一个表达式，例如`loopValue == 999`。

![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b02e5c1d39494d9bb9a99d1693fd7781~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?)

**日志点**实际上是没有代码的 `console.log ()`, 右键单击任何一行，选择 '添加日志点'，然后添加表达式:

![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d7e93a96a1bd4a869d3962ee0a3db4c2~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp)

**DOM断点**：在**Elements**(元素)面板中，右键单击任意dom节点，选择”发生中断条件“中的任意选项，就会在JavaScript触发其对应逻辑时，激活该DOM断点。

![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/17550bf36eb34ec2a37551855eb919df~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?)

每当 JavaScript 调用 Fetch ()或 XMLHttpRequest 从 URL 中检索数据时，Ajax 断点就会被激活。在 **Source** (源代码)面板中，打开右侧的 **XHR/提取断点**面板，单击 **+** 并输入完整或部分URL以启用断点。

![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/290b6847098b467497fef5b55bf9582f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?)

最后，你有时想要忽略正在使用但无法更改的代码，例如 jQuery、 React 、用于统计的三方JavaScript等。按 F1或单击齿轮图标打开设置，选择”忽略列表“选项卡，并添加任意数量的完整或部分 URL/文件名。之后，断点调试器将跳过这些文件中的代码，并忽略它们引发的任何异常。

![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b6c8b372a2fd449e8e4ae54346148f33~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?)

## 调试 Node.js 和 Deno 应用程序

你还可以在 Chrome DevTools 中直接调试 Node.js 和 Deno 服务器端应用程序，因为他们使用的都是 V8 JavaScript 引擎。要启动 V8检查程序，请使用`--inspect`参数启动应用程序。例如，要从 index.js 文件启动 Node 应用程序:

```css
sh node --inspect index.js
```

Deno 和 n[oemon](https://nodemon.io/ 'https://nodemon.io/') 支持相同的`--inspect`参数。你还可以使用`--inspect-brk` 在第一行停止处理，这样你就可以在应用程序启动时逐步执行它。

这个启动命令监听 localhost: 9229端口，任何本地调试客户端都可以附加到该调试器(包括 Chrome) :

```csharp
Debugger listening on ws://127.0.0.1:9229/301372bc-780a-2051-ceb2-c8d78227092e
```

如果你在其他设备或 Docker 容器中运行应用程序，请确保端口9229可访问，并指定0.0.0.0允许从本地网络的任何地方访问:

```ini
node --inspect=0.0.0.0:9229 index.js
```

应用程序运行后，打开 Chrome 并输入地址`chrome://inspect` 以查看所有可用的应用程序:

![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/97dce641b31a46508f8196b6d4270163~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp)

应用程序出现在“**Remote Target**”列表中可能需要几秒钟的时间。如果没有，请确保检查了 **Discover network targets**，然后单击 **Configure** 添加应用程序正在运行的设备的 IP 地址和端口。

单击目标应用程序的**inspect**链接以启动另一个 DevTools 窗口。相比浏览器 DevTools 它的选项更少，并且你主要使用 Source 面板来添加断点。与前面一样，你可以选择“文件系统”窗口并单击“+ 向工作区添加文件夹”来编辑服务器端代码。

## 结论

+   在过去的十年中，DevTools 已经有了很大的发展，并且已经到了可以成为你唯一需要的 web 开发工具的地步。我们已经讨论了代码编辑和bug调试的技巧，但是这里还有一些我喜欢的功能:
    
    +   在 **Network**(网络) 选项卡中，右键单击任何 Fetch/XHR 请求，然后选择 复制 选项。你可以为 JavaScript、 Node.js、 cURL 等生成有效的代码。
    +   从**Source**(源代码)选项卡中打开任何图像，然后右键单击可以复制它的base64格式。
    +   在“代码段”面板中创建代码段，以便可以在任何页面上运行相同的 JavaScript。
    +   通过按暂停/恢复图标停止执行，然后按住相同的图标并选择停止，从而停止无限循环。
    +   从 `chrome://inspect` 面板调试一个运行在 Android 手机上的站点，该手机通过 USB 连接到你的电脑。你还可以定义端口转发，这样任何本地或远程站点在设备上都显示为 localhost: &lt; port &gt; 。
    +   **Rendering**(渲染)面板提供了评估核心网页指标、模拟CSS深色模式、模拟CSS打印模式、减少运动等功能。
    +   问题面板：当正在使用的一个 API将在未来的 Chrome 版本中发生变更时，问题面板会提供修改建议。

##### 原文链接 [blog.openreplay.com/how-to-use-…](https://blog.openreplay.com/how-to-use-chrome-as-a-code-editor-and-debugger 'https://blog.openreplay.com/how-to-use-chrome-as-a-code-editor-and-debugger')$$$$$$$</description><guid isPermaLink="true">https://692.cloudns.be/post/ru-he-shi-yong-%20Chrome%20-zuo-wei-dai-ma-bian-ji-qi-he-diao-shi-qi-%20.html</guid><pubDate>Mon, 17 Mar 2025 18:54:06 +0000</pubDate></item><item><title>阳光书吧设计</title><link>https://692.cloudns.be/post/yang-guang-shu-ba-she-ji.html</link><description>![Image](https://github.com/user-attachments/assets/41031c11-9729-4c6d-a2c4-08207172e34c)
![Image](https://github.com/user-attachments/assets/0bed1874-e421-441b-8d98-2a5b7f357aaa)
![Image](https://github.com/user-attachments/assets/8cfa698f-293f-4dce-b783-f2fc86fded0a)
![Image](https://github.com/user-attachments/assets/4b3f579c-33ec-42fc-b99e-b13acd6f66a1)
![Image](https://github.com/user-attachments/assets/974286fa-d11d-41ad-b2f2-4dfd7f5695cc)$$$$$$$</description><guid isPermaLink="true">https://692.cloudns.be/post/yang-guang-shu-ba-she-ji.html</guid><pubDate>Sat, 15 Mar 2025 14:45:52 +0000</pubDate></item><item><title>提高Cloudflare站点在中国的体验</title><link>https://692.cloudns.be/post/ti-gao-Cloudflare-zhan-dian-zai-zhong-guo-de-ti-yan.html</link><description>


## 起因

众所周知，因为很多人用Cloudflare当作梯子中转之类的原因，中国对Cloudflare网络的速度会有很大程度的劣化，所以在上面的网站访问速度也会非常烂。最近我发现了一个不错的办法可以在一定程度上避免这个问题，所以今天就来说一说。

## 普通用户的解决方法

对于网站的访问者来说，使用[CloudflareSpeedTest](https://github.com/XIU2/CloudflareSpeedTest)这个工具就挺不错的，它能检测到当前网络连哪个IP是最好的。因为Cloudflare网络用的是Anycast，无论从哪个IP进入都可以，所以用这个检测出来的IP直接改Hosts访问就能解决访问网站慢的问题。  
不过有些地区可能是服务商主动对Cloudflare的IP段进行限速，那这样有可能测试出来没有可以使用的节点，那么还有一种方法，网络上有些可能是企业之类的人会反代Cloudflare的网站用于解决在国内访问慢的问题，并且没有对host头做限制，那么这些第三方的节点同样也可以作为访问Cloudflare网站的方法。具体怎么找到这样的IP有一个[仓库](https://github.com/ip-scanner/cloudflare)每天都会扫描全网去找像这样的节点。  
当然这些节点也不是所有的IP从中国连接速度都很好，这时候可以把这个仓库的所有IP收集起来然后再丢给CloudflareSpeedTest去测试，具体我写了个简单的脚本来处理：

```
git clone https://github.com/ip-scanner/cloudflare.git
cat cloudflare/*.txt &gt; proxy.txt
./CloudflareST -allip -sl 0.1 -f proxy.txt -n 500

```

这样获得的第三方IP就基本上不会被限速，里面甚至有可能有通过IPLC或者IEPL的节点，包括拿来当梯子中转速度都几乎可以跑满带宽，另外还有一个优点是这样Cloudflare获得的IP就是第三方节点的IP，可以起到匿名的作用。

## 对于站长的解决方法

上面的方法相当于是用户自己去解决访问的问题，但是操作可能还是会有点复杂，所以对于网站站长来说不可能去期待访客通过这种方法来提高访问自己网站的速度。不过Cloudflare网站接入只能通过NS方式接入，这样接入的话域名解析的IP就是自动分配的，没办法自己设定解析，也就不能选择更合适的IP，另外之前用CF Partner通过CNAME接入的方法基本上都全死光了，那现在应该怎么办呢？后来我搜了一下，Cloudflare原来已经提供了官方通过CNAME接入的方法（应该是新加的功能），除了要绑信用卡之外就没别的要求了。  
在使用这个功能之前，必须先有2个域名，一个是不重要的域名，通过NS方式接入Cloudflare，另一个是主要使用的域名，可以接到Cloudflare上，也可以接到别的NS服务商上。然后在那个不重要的域名中先设定好源站的解析，可以解析到“@”或者随便一个二级域名也可以，并且打开代理。然后点开SSL/TLS-&gt;自定义主机名，第一次使用需要绑定信用卡或者PayPal，好像是因为它是个什么预付费的项目，免费100个CNAME，超过100个每个0.1USD。打开以后在回退源中输入刚刚设置好解析的那个域名，当回退源状态显示有效后就可以添加自定义主机名了。这里添加的主机名就是主要使用的域名，输入后根据提示在主域名上设定好TXT记录，完成后只要看到刚刚设定的主机名后面跟了两个有效就可以了。  
这样准备工作就做完了，现在只要把主域名的解析设定到Cloudflare网络的任意节点，它就会自动连接到不重要的域名所解析的IP上。至于怎么获得优秀的IP，就可以像普通用户那样操作了，获得优秀的IP以后我们就可以设定一个A记录解析过去。  
不过这里需要注意一些地方，如果使用的优选IP是Cloudflare官方的IP，那基本上也不会有什么问题，只是这个IP可能有些地区还是会访问缓慢，毕竟它也算是在重点关注对象中。如果是选择第三方节点IP，大多数情况速度都能保障，但是有个很大的问题就是那些节点的主人如果发现了你在使用他们的节点，他们是可以很轻易的进行中间人攻击的，毕竟域名都解析过去了，整个SSL证书也很简单，为了能避免这个问题一定要开启“证书透明度监视”保证能在第一时间避免有人进行中间人攻击。另外还有一个问题就是既然第三方IP可以匿名，那么网站也没办法获取到用户的真实IP地址了，像Cloudflare一些根据IP的防火墙也会无法生效，像WAF中的速率限制规则是万万不能开的，开了很大可能网站就访问不了了。还有就是DDoS是可以击垮第三方节点的，可能会使网站的可用性下降。所以如果对速度没有特别在意的情况下还是解析到官方IP上更好一些。  
所以为了避免节点可能会用不了的情况，我有个想法（因为我没有大陆地区的服务器所以只是设想），之前我用过一个可以给Cloudflare设定DDNS的脚本，叫[cloudflare-api-v4-ddns](https://github.com/aipeach/cloudflare-api-v4-ddns)，原本它是去请求获取本机IP的API设定解析的，那么如果把上面优选IP的结果输入到这个脚本中，放到国内的服务器上，每天自动执行一次，那这样我的网站不就会一直使用最优秀的IP了嘛，可惜我没有国内的服务器，改起来还要费点事就算了吧。

## 感想

有了很多辅助的工具，能让Cloudflare不再成为减速CDN，那它岂不是可以吊打国内其他CDN厂商了😆，果然还是良心厂商啊。$$$$$$$</description><guid isPermaLink="true">https://692.cloudns.be/post/ti-gao-Cloudflare-zhan-dian-zai-zhong-guo-de-ti-yan.html</guid><pubDate>Sat, 15 Mar 2025 11:48:15 +0000</pubDate></item><item><title>CF_Drop轻量级文件分享工具- 基于 Cloudflare Worker、D1 和 KV</title><link>https://692.cloudns.be/post/CF_Drop-qing-liang-ji-wen-jian-fen-xiang-gong-ju--%20-ji-yu-%20Cloudflare%20Worker%E3%80%81D1%20-he-%20KV.html</link><description># Cloudflare Drop
基于 Cloudflare Worker、D1Database 和 KV 实现的轻量级文件分享工具。

&gt; [项目地址](https://github.com/oustn/cloudflare-drop)

&lt;img src='https://github.com/user-attachments/assets/60573c40-5c91-489f-af5f-ee8653376412' width='500' /&gt;

## 自动部署

[![Deploy to Cloudflare Workers](https://deploy.workers.cloudflare.com/button)](https://deploy.workers.cloudflare.com/?url=https://github.com/oustn/cloudflare-drop)

1. 点击按钮，跳转到自动部署页面
2. 根据页面指引，关联 GitHub &amp; Cloudflare，配置 Cloudflare Account ID &amp; API Key
3. Fork 仓库
4. 开启 Action
5. 部署

&gt; 创建 Cloudflare API Key 时，如果使用 worker 模板创建，请记得添加 D1 的编辑权限。

## 更新

同步 Fork 的仓库即可自动更新 &amp; 构建。
&lt;img src='https://github.com/user-attachments/assets/6661f148-166f-416a-b0e4-327cdb182313' width='500' /&gt;

## 配置 GitHub Action Secret

1. 在初次部署完成后，还需要创建 [D1Database](https://developers.cloudflare.com/d1/get-started/#2-create-a-database) &amp; [KV](https://developers.cloudflare.com/kv/get-started/#2-create-a-kv-namespace)，参考对应文档。
2. 配置 Secret：在 forked 的仓库 -&gt; **Settings** -&gt; **Secrets and variables** -&gt; **Actions** -&gt; **New repository secret**
3. 配置以下 Secret：
   - CUSTOM_DOMAIN （可选，域名，如 drop.example.cn）
   - D1_ID (D1Database ID)
   - D1_NAME (D1Database Name)
   - KV_ID (KV Namespace ID)
4. 重新运行 Github Actions

## 其他配置

### 文件大小限制

默认文件限制为 10M，可以通过添加 Action 变量来修改。

新增 `SHARE_MAX_SIZE_IN_MB` Action 变量，值为最大允许的 MB 数字，例如 20，配置路径：在 forked 的仓库 -&gt; **Settings** -&gt; **Secrets and variables** -&gt; **Actions** -&gt; **New repository variable**

### 分享过期时间配置

分享默认有效期是一个小时，可以通过添加 Action 变量来修改。

新增 `SHARE_DURATION` Action 变量，配置格式为 `数值+单位`，比如 (5minute)，支持的单位有 `minute`, `hour`, `day`, `week`, `month`, `year`

### 新增 IP 上传频率限制

默认无限制，可以通过添加 Action 变量来修改。

新增 `RATE_LIMIT` Action 变量，值为每 10s 可请求数，比如 10

## 过期清理

Worker 添加了一个 10 分钟的定时任务，自动清理过期的 KV 存储和 D1 中的记录。
$$$$$$$</description><guid isPermaLink="true">https://692.cloudns.be/post/CF_Drop-qing-liang-ji-wen-jian-fen-xiang-gong-ju--%20-ji-yu-%20Cloudflare%20Worker%E3%80%81D1%20-he-%20KV.html</guid><pubDate>Fri, 14 Mar 2025 15:47:27 +0000</pubDate></item><item><title>CloudPaste 在线剪贴板- 基于Cloudflare Workers</title><link>https://692.cloudns.be/post/CloudPaste%20-zai-xian-jian-tie-ban--%20-ji-yu-Cloudflare%20Workers.html</link><description># CloudPaste - 在线剪贴板 📋
一个基于 Cloudflare Workers 的在线剪贴板和文件分享服务。支持 Markdown、密码保护、文件上传等功能。
&gt;&lt;a href='https://github.com/ling-drag0n/CloudPaste' target='_blank'&gt;来源&lt;/a&gt;
&gt;&lt;a href='https://note.692.cloudns.be/share/paste/CloudPaste' target='_blank'&gt;DEMO&lt;/a&gt;
&lt;tr&gt;&lt;img src='https://github.com/user-attachments/assets/bff7cdf4-a8df-4c4c-89e0-c16bd211fc81' width='auto'&gt; &lt;/tr&gt;


## ✨ 功能特点

### 📝 文本分享

- 支持普通文本和 Markdown 样式
- Markdown 实时预览和同步滚动
- 编辑器支持双向拉伸调整大小
- 支持密码保护
- 可选过期时间
- 支持自定义链接后缀（仅单文件上传时可用）
- 支持设置访问次数限制
- 文本分享支持 pdf、word 文档、png 图片导出
- 支持自动保存草稿
  - 浏览器关闭前自动保存
  - 下次访问时可恢复
  - 提交成功后自动清除

### 📁 文件分享

- 支持拖拽上传
- 多文件上传
- 可设置单次上传文件大小限制和总存储限制
- 支持密码保护
- 可选过期时间
- 实时上传进度显示
- 文件预览功能
- 上传速度显示
- 支持取消上传
- 支持自定义链接后缀（仅单文件上传时可用）
- 支持二维码分享和直链分享
- 支持设置下载次数限制

### 🔐 访问控制

- 监控存储空间使用情况
- 密码保护
  - 支持文本和文件分享设置密码
  - 管理员可随时修改或移除密码
  - 密码加密存储
- 文本内容控制
  - 仅管理员可编辑已分享的文本内容
  - 普通用户只能查看
  - 支持修改过期时间
  - 支持修改访问次数限制
- 上传控制
  - 管理员可开启/关闭文本上传功能
  - 管理员可开启/关闭文件上传功能
  - 防止恶意上传占用资源

### 🛡️ 安全特性

- 密码加密存储
- 访问权限控制
- CORS 安全配置
- 上传限制保护
- 自动过期清理
  - 定时检查过期内容
  - 自动删除过期分享
  - 释放存储空间
  - 访问触发清理检查

### 🎨 界面优化

- 全分辨率自适应布局
- 优化的移动端适配
- 美化的滚动条样式
- 平滑的动画过渡效果
- 文件上传进度动画
- 复制成功提示动画
- 错误提示动画效果
- 拖放上传视觉反馈
- 暗色主题支持（有点瑕疵）

## 🚀 部署（自动）

### 1. GitHub Actions 部署(可选)

1. **Fork 本仓库**

   - 点击右上角的 Fork 按钮
   - 等待仓库克隆完成

2. **设置 GitHub Secrets**
   在你的 GitHub 仓库中，转到 Settings -&gt; Secrets and variables -&gt; Actions -&gt; New Repository secrets ，添加以下 secrets：

   - `CF_API_TOKEN`: Cloudflare API 令牌

     - 访问 [Cloudflare Dashboard](https://dash.cloudflare.com/profile/api-tokens)
     - 创建新的 API 令牌 -选择'编辑 Cloudflare Workers'

   - `CF_ACCOUNT_ID`: Cloudflare 账户 ID

     - 在 Cloudflare 仪表板右侧可以找到

   - `ADMIN_USERNAME`: 管理员用户名

     - 设置你的管理员账号

   - `ADMIN_PASSWORD`: 管理员密码
     - 设置你的管理员密码

3. **运行工作流**

### 2. 一键部署

部署后默认无密码,需在 cloudflare 的对应 worker 下的变量和机密中设置：

[![Deploy to Cloudflare Workers](https://deploy.workers.cloudflare.com/button)](https://deploy.workers.cloudflare.com/?url=https://github.com/ling-drag0n/CloudPaste)

## 🚀 部署（手动）

### 1. 准备工作

1. 注册 [Cloudflare](https://dash.cloudflare.com) 账号
2. 进入 Cloudflare 控制台

### 2. 创建存储资源

1. 创建 KV 命名空间

   - 名称：`PASTE_STORE`
   - 用于存储文本内容

2. 创建 KV 命名空间

   - 名称：`UPLOAD_STATUS`
   - 用于存储上传功能的开关状态

3. 创建 R2 存储桶
   - 名称：`cloudpaste-files`
   - 用于存储上传的文件

### 3. 创建 Worker

1. 创建新的 Worker 脚本

2. 配置环境变量：

   ```env
   ADMIN_USERNAME=你的管理员用户名
   ADMIN_PASSWORD=你的管理员密码
   ```

3. 绑定存储：

   - KV 绑定：

     ```toml
     # 文本存储
     变量名：PASTE_STORE
     选择创建的 KV 命名空间

     # 上传状态控制
     变量名：UPLOAD_STATUS
     选择创建的 KV 命名空间
     ```

   - R2 绑定：
     ```toml
     变量名：FILE_STORE
     选择创建的 R2 存储桶
     ```

4. KV 命名空间说明：

   - `PASTE_STORE`: 用于存储文本分享内容和元数据
   - `UPLOAD_STATUS`: 用于存储和控制上传功能的开关状态
     - `textUpload`: 控制文本上传功能
     - `fileUpload`: 控制文件上传功能
   - `FILE_STORE`: 用于存储上传的文件

5. 配置示例代码 (wrangler.toml):

   ```toml
   [[kv_namespaces]]
   binding = 'PASTE_STORE'
   id = '你的KV命名空间ID'

   [[kv_namespaces]]
   binding = 'UPLOAD_STATUS'
   id = '你的KV命名空间ID'

   [[r2_buckets]]
   bucket_name = 'cloudpaste-files'
   binding = 'FILE_STORE'
   ```

### 4. 部署代码

1. 复制 `worker.js` 的完整代码
2. 粘贴到 Worker 的编辑器中
3. 保存并部署

## 🔧 代码结构说明

### 主要组件

1. `worker.js`

   - 主要的 Worker 代码
   - 包含路由处理和 API 实现

2. 工具函数

   - `generateId`: 生成随机 ID
   - `hashPassword`: 密码加密
   - `verifyPassword`: 密码验证
   - `calculateExpiryTime`: 计算过期时间
   - `isExpired`: 检查是否过期

3. 前端组件
   - Vue 3 应用
   - Markdown 渲染
   - 代码高亮
   - 文件上传界面

### 📡 API 端点

1. 文本相关

   ```http
   POST /api/paste     # 创建文本分享
   GET  /api/paste/:id # 获取文本内容
   ```

2. 文件相关

   ```http
   POST /api/file      # 上传文件
   GET  /api/file/:id  # 获取文件信息
   GET  /api/file/:id?download=true # 下载文件
   GET  /download/:id  # 直接下载文件
   ```

3. 管理相关
   ```http
   POST   /api/admin/login                    # 管理员登录
   GET    /api/admin/shares                   # 获取分享列表
   GET    /api/admin/storage                  # 获取存储空间使用情况
   DELETE /api/admin/paste/:id                # 删除文本分享
   DELETE /api/admin/file/:id                 # 删除文件分享
   PUT    /api/admin/paste/:id/content        # 更新文本内容
   PUT    /api/admin/paste/:id/password       # 修改文本分享密码
   PUT    /api/admin/file/:id/password        # 修改文件分享密码
   GET    /api/admin/upload-status            # 获取上传状态
   PUT    /api/admin/upload-status            # 更新上传状态
   PUT    /api/admin/file/:id/settings        # 修改文件分享设置
   ```

## 🔄 自动化功能

### 过期内容清理

- 自动检测过期内容
- 定时清理过期文件和文本
- 释放存储空间
- 每整点自动触发清理

## ⚠️ 使用限制

- 文件大小上限：98MB（可修改）
- 支持的过期时间：1 小时、1 天、7 天、30 天，永不过期
- 并发请求受 Worker 限制
- R2 免费总存储空间：10GB（可修改）
- 分享次数访问限制：
  - 文本分享可设置最大访问次数
  - 文件分享可设置最大下载次数
  - 自定义设置次数，0 表示无限制
  - 达到限制次数后自动删除
- 自定义链接限制：
  - 仅支持字母、数字、横线和下划线
  - 仅单文件上传时可用
- 存储空间预警：
  - 70%使用率时显示警告
  - 90%使用率时显示危险提示
  - 存储空间满时无法继续上传

## 📝 注意事项

1. 确保正确配置环境变量

2. 定期检查存储使用量

   - 通过管理面板监控存储空间
   - 注意存储空间使用率预警
   - 及时清理不需要的内容

3. 监控错误日志

4. 注意 Worker 使用配额

5. 直链下载若要在服务器传输文件

   ```bash
   # 直接下载
   curl -O https://your-domain/download/fileId

   # 带密码下载
   curl -H 'X-Password: your-password' -O https://your-domain/download/fileId
   ```

## 🛠️ 使用

- Cloudflare Workers
- Cloudflare KV
- Cloudflare R2
- Vue 3
- Marked (Markdown 渲染)
- Highlight.js (代码高亮)

## 📱 浏览器支持

- Chrome (推荐)
- Firefox
- Safari
- Edge
- 移动端浏览器

## 📄 许可证

MIT License

## 🔗 相关链接

- [Cloudflare Workers 文档](https://developers.cloudflare.com/workers/)
- [Vue 3 文档](https://v3.vuejs.org/)
- [Marked 文档](https://marked.js.org/)
$$$$$$$</description><guid isPermaLink="true">https://692.cloudns.be/post/CloudPaste%20-zai-xian-jian-tie-ban--%20-ji-yu-Cloudflare%20Workers.html</guid><pubDate>Thu, 13 Mar 2025 13:21:17 +0000</pubDate></item><item><title>clipboard在线剪贴板 -基于 Cloudflare Workers</title><link>https://692.cloudns.be/post/clipboard-zai-xian-jian-tie-ban-%20--ji-yu-%20Cloudflare%20Workers.html</link><description># 在线剪贴板 - 基于 Cloudflare Workers
[项目地址](https://github.com/yun8862779/web-clipboard)

![Image](https://github.com/user-attachments/assets/a4ed6841-3665-4e91-87cb-ccec88c4a392)

这是一个简单而美观的在线剪贴板，使用 Cloudflare Workers 和 KV 存储构建。它允许您在不同设备之间轻松复制和粘贴文本，并提供了安全的分享功能。

## 功能特性

*   **多设备同步:**  随时随地访问您的剪贴板内容，只需一个浏览器。
*   **美观的 UI:**  精心设计的界面，支持自动暗黑模式，提供舒适的视觉体验。
*   **安全分享:**  生成带有自定义查看次数和有效期的分享链接，方便且安全地与他人共享剪贴板内容。
*   **快速便捷:**  支持一键保存、读取和复制，操作简单高效。
*   **响应式设计:**  完美适配 PC 端和移动端，提供一致的用户体验。
*   **持久化存储:**  利用 Cloudflare KV 存储数据，确保您的剪贴板内容持久保存。
*   **隐私保护:**  支持链接过期和查看次数限制, 不会在服务器永久储存你的剪切板信息。

## 技术栈

*   **Cloudflare Workers:**  用于构建无服务器应用程序。
*   **Cloudflare KV:**  用于存储剪贴板数据和分享链接配置。
*   **HTML, CSS, JavaScript:**  构建用户界面和交互逻辑。
*   **Font Awesome:**  提供图标字体。

## 部署

1. **创建 Cloudflare Workers 项目:**
    *   登录 Cloudflare 控制台。
    *   导航到 'Workers &amp; Pages'。
    *   点击 'Create application'。
    *   选择 'Create Worker'。
    *   为您的 Worker 命名，例如 'online-clipboard'。
    *   选择一个入门模板（例如 'Hello World'）。
    *   点击 'Create Worker'。

2. **绑定 KV 命名空间:**
    *   在 Worker 的设置页面，找到 'Settings' 标签页。
    *   选择 'Variables'。
    *   在 'KV Namespace Bindings' 部分，点击 'Add binding'。
    *   **Variable name:** 输入 `JTB`。
    *   **KV namespace:** 选择您已经创建好的 KV 命名空间，或者点击 'Create a namespace' 新建一个，并命名为 `JTB` (或其他您喜欢的名称)。
    *   点击 'Save'。

3. **复制代码并部署:**
    *   在 Worker 的 'Quick edit' 页面。
    *   将`index.js`的代码完全替换原有的代码。
    *   点击 'Save and deploy'。

## 使用方法

1. 访问您的 Worker URL。
2. 在文本框中粘贴您想要保存的内容。
3. 点击 '保存到云端' 按钮。
4. 在其他设备上访问相同的 URL，点击 '从云端读取' 按钮即可同步剪贴板内容。
5. 点击 '复制到本地' 按钮可将文本框内容复制到本地剪贴板。
6. 点击 '分享' 按钮可生成分享链接，并设置查看次数和有效期。

$$$$$$$</description><guid isPermaLink="true">https://692.cloudns.be/post/clipboard-zai-xian-jian-tie-ban-%20--ji-yu-%20Cloudflare%20Workers.html</guid><pubDate>Thu, 13 Mar 2025 13:19:12 +0000</pubDate></item><item><title>Gmeek构建网站（进阶篇）</title><link>https://692.cloudns.be/post/Gmeek-gou-jian-wang-zhan-%EF%BC%88-jin-jie-pian-%EF%BC%89.html</link><description># 一、主题配置 👀 

### 1. 手动模式（默认）
这种模式就是当访问者第一次打开博客页面时，呈现的是亮主题。
访问者可以通过页面右上角的按钮随意切换（亮/暗/跟随系统），当切换过后，会自动在浏览器存储目前的选择，之后访问者用同一浏览器再打开博客任何页面，则自动为上次选择的模式。
```
'themeMode':'manual',
'dayTheme':'light',
'nightTheme':'dark',
```

### 2. 固定模式
```
'themeMode':'fix',    定义固定
'dayTheme':'light',   定义固定的主题，`light`则永远为亮主题，`dark`则永远为暗主题，用户无法切换
'nightTheme':'github-light',    定义`utterances`评论框的永久固定主题。
```

#### 2.1. 固定亮主题
```
'themeMode':'fix',
'dayTheme':'light',
'nightTheme':'github-light',
```
#### 2.2. 固定暗主题
```
'themeMode':'fix',
'dayTheme':'dark',
'nightTheme':'dark-blue',
```
&gt; [!TIP]
&gt; 主题设置可以查看[github官方](https://github.com/settings/appearance)支持的主题
&gt; 亮主题：`light` `light_high_contrast` `light_colorblind ` `light_tritanopia `
&gt; 暗主题：`dark` `dark_high_contrast` `dark_colorblind` `dark_tritanopia` `dark_dimmed`

&gt; [!TIP]
&gt; [utterances](https://utteranc.es/)评论框的主题选择有：
&gt; 亮主题：`github-light` `boxy-light` `preferred-color-scheme`
&gt; 暗主题：`github-dark` `github-dark-orange` `icy-dark` `dark-blue` `photon-dark` `gruvbox-dark`




# 二、右上角的按钮配置 👀 
在首页上部的右侧有一些按钮，配置方式如下：

### 1. 站内链接
例如[关于页面](https://grapehut.us.kg/about.html)和[友情链接](https://grapehut.us.kg/link.html)

#### 1.1. 添加config.json配置
```
'singlePage':['about'],
```
#### 1.2. 添加一个Labels标签为`about`，在你的issue里面写一个文章，然后配置Labels为`about`即可。
#### 1.3. 手动全局生成一次。

&gt; [!IMPORTANT]
&gt; `about`标签只可以添加给唯一一篇issue
&gt; 如果有多个`singlePage`，可以这样定义`'singlePage':['link','about'],`
&gt; `about`和`link`这两个图标的SVG是内置的无需定义`iconList`，其他则需要自己定义


### 2. 站外链接
如果你的`about`页面是站外的，或者想定义其他的站外链接，例如[music](https://music.meekdai.com/)。下面以添加music页面按钮为示例。

#### 2.1. 添加config.json配置
此处`iconList`自定义了图标的SVG，`exlink`定义了外部链接的地址
```
'iconList':{'music':'M12.7 0.9L7.3 0.9C6 0.9 4.9 2 4.9 3.3L4.9 10.1C4.5 9.9 4.1 9.8 3.6 9.8C2.1 9.8 0.9 11 0.9 12.4C0.9 13.9 2.1 15.1 3.6 15.1C5 15.1 6.2 13.9 6.2 12.4L6.2 3.3C6.2 2.7 6.7 2.2 7.3 2.2L12.7 2.2C13.3 2.2 13.8 2.7 13.8 3.3L13.8 7.5C13.4 7.3 12.9 7.1 12.4 7.1C11 7.1 9.8 8.3 9.8 9.8C9.8 11.2 11 12.4 12.4 12.4C13.9 12.4 15.1 11.2 15.1 9.8L15.1 3.3C15.1 2 14 0.9 12.7 0.9ZM3.6 13.8C2.8 13.8 2.2 13.2 2.2 12.4C2.2 11.7 2.8 11.1 3.6 11.1C4.3 11.1 4.9 11.7 4.9 12.4C4.9 13.2 4.3 13.8 3.6 13.8ZM12.4 11.1C11.7 11.1 11.1 10.5 11.1 9.8C11.1 9 11.7 8.4 12.4 8.4C13.2 8.4 13.8 9 13.8 9.8C13.8 10.5 13.2 11.1 12.4 11.1ZM12.4 11.1'},
'exlink':{'music':'https://music.meekdai.com'},
```
#### 2.2. 手动全局生成一次。


### 3. SVG图标格式
使用`iconList`自定义SVG图标必须是`16px`大小的，建议使用github的[Octicons 图标](https://primer.style/foundations/icons/#16px)

Octicons图标链接：https://primer.style/foundations/icons/#16px
大佬自己转换的Octicons图标path列表：https://gist.github.com/Meekdai/f6375fe2740428af39d90f1afa678fdc





# 三、提示标签 👀 
Github的语法里面有5种警报强调信息，分别是`NOTE` `TIP` `IMPORTANT` `WARNING` `CAUTION` 
在写文章的时候，适当使用可以提高文章的可读性

### 使用方式：
```
&gt; [!NOTE]
&gt; Useful information that users should know, even when skimming content.

&gt; [!TIP]
&gt; Helpful advice for doing things better or more easily.

&gt; [!IMPORTANT]
&gt; Key information users need to know to achieve their goal.

&gt; [!WARNING]
&gt; Urgent info that needs immediate user attention to avoid problems.

&gt; [!CAUTION]
&gt; Advises about risks or negative outcomes of certain actions.
```

### 效果：
&gt; [!NOTE]
&gt; Useful information that users should know, even when skimming content.

&gt; [!TIP]
&gt; Helpful advice for doing things better or more easily.

&gt; [!IMPORTANT]
&gt; Key information users need to know to achieve their goal.

&gt; [!WARNING]
&gt; Urgent info that needs immediate user attention to avoid problems.

&gt; [!CAUTION]
&gt; Advises about risks or negative outcomes of certain actions.


# 四、折叠显示 👀 
### 使用方式：
```
&lt;details&gt;
    &lt;summary&gt;展开&lt;/summary&gt;
    &lt;pre&gt;&lt;code&gt;
    # 这里空一行，下面开始写代码
    # 在这里写折叠的代码
    # 最后这两行结束标签一定要顶格写且不能接在代码后面！！！
    &lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
```
### 效果：
&lt;details&gt;
    &lt;summary&gt;展开&lt;/summary&gt;
    &lt;pre&gt;&lt;code&gt;
    # 这里空一行，下面开始写代码
    # 在这里写折叠的代码
    # 最后这两行结束标签一定要顶格写且不能接在代码后面！！！
    &lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;




# 五、文章插入html标签 👀 
Github由于安全考虑，是不允许使用`iframe`等标签的，而且在issues插入的图片也会自动转换为github的地址。
为了文章的多样性，在Gmeek的`v2.19`版本中添加了支持html标签的功能。

### 使用方式：
在需要添加html标签的位置使用`code`方式，并且后面紧跟着Gmeek-html，然后才是html标签。

#### 1. 图片
`Gmeek-html&lt;img src='https://picsum.photos/400'&gt;`
```
`Gmeek-html&lt;img src='https://picsum.photos/400'&gt;`
```

#### 2. 内嵌框架iframe-网站
`Gmeek-html&lt;iframe style='border-radius:12px' src='https://music.meekdai.com/#35' width='100%' height='150px' frameborder='0' allowfullscreen='true'&gt;&lt;/iframe&gt;`
```
`Gmeek-html&lt;iframe style='border-radius:12px' src='https://music.meekdai.com/#35' width='100%' height='150px' frameborder='0' allowfullscreen='true'&gt;&lt;/iframe&gt;`
```

#### 3. 内嵌框架iframe-音乐
`Gmeek-html&lt;iframe style='border-radius:12px' src='https://open.spotify.com/embed/track/0U3fV7K4WFfVRgLGEAKh3g?utm_source=generator' width='100%' height='100' frameBorder='0' allowfullscreen='' allow='autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture' loading='lazy'&gt;&lt;/iframe&gt;`
```
`Gmeek-html&lt;iframe style='border-radius:12px' src='https://open.spotify.com/embed/track/0U3fV7K4WFfVRgLGEAKh3g?utm_source=generator' width='100%' height='100' frameBorder='0' allowfullscreen='' allow='autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture' loading='lazy'&gt;&lt;/iframe&gt;`
```

#### 4. 内嵌框架iframe-视频
`Gmeek-html&lt;iframe style='border-radius:12px' src='//player.bilibili.com/player.html?isOutside=true&amp;aid=1604800941&amp;bvid=BV1qm421M7Xs&amp;cid=1557311907&amp;p=1&amp;autoplay=0' scrolling='no' border='0' frameborder='no' framespacing='0' allowfullscreen='true' width='100%' height='200px'&gt;&lt;/iframe&gt;`
```
`Gmeek-html&lt;iframe style='border-radius:12px' src='//player.bilibili.com/player.html?isOutside=true&amp;aid=1604800941&amp;bvid=BV1qm421M7Xs&amp;cid=1557311907&amp;p=1&amp;autoplay=0' scrolling='no' border='0' frameborder='no' framespacing='0' allowfullscreen='true' width='100%' height='200px'&gt;&lt;/iframe&gt;`
```


`Gmeek-html&lt;iframe style='border-radius:12px' width='100%' height='200px' src='https://www.youtube.com/embed/RzYO_cGqrAY?si=qO64_ABMM0jyvNUi' title='YouTube video player' frameborder='0' allow='accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share' referrerpolicy='strict-origin-when-cross-origin' allowfullscreen&gt;&lt;/iframe&gt;`
```
`Gmeek-html&lt;iframe style='border-radius:12px' width='100%' height='200px'  src='https://www.youtube.com/embed/RzYO_cGqrAY?si=qO64_ABMM0jyvNUi' title='YouTube video player' frameborder='0' allow='accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share' referrerpolicy='strict-origin-when-cross-origin' allowfullscreen&gt;&lt;/iframe&gt;`
```


#### 5. 其他
上面仅仅是示例了一些常用的html标签，其他html标签同样也支持，可以尝试添加到自己的文章中。 






# 六、static文件夹使用 👀 
如果需要在docs文件内上传一些自己的文件，比如图片、js、css等，所以在`v2.20`版本添加了这个功能。

### 使用方式：
1. 在自己的仓库根目录下新建一个文件夹，名称必须是`static`。
2. 然后在`static`文件内上传一些自己的文件，比如`avatar.svg`文件。
3. 通过手动全局生成一次成功后，你就可以通过 xxx.github.io/avatar.svg 访问了。

&gt; [!TIP]
&gt;在全局生成的时候，Actions会自动把`static`文件夹的所有内容拷贝到`docs`文件夹内。方便用户把docs当成一个目录部署到CF等其他服务器中。




# 七、插件 👀 
为了使得Gmeek的功能更加的丰富，添加了插件功能，目前已经有几个插件可以使用。

### 1. Vercount浏览计数`GmeekVercount.js`
全站添加，只需要在config.json文件内添加配置
```
'allHead':'&lt;script src='https://blog.meekdai.com/Gmeek/plugins/GmeekVercount.js'&gt;&lt;/script&gt;',
```
单个文章页添加，只需要在文章最后一行添加如下
```
&lt;!-- ##{'script':'&lt;script src='https://blog.meekdai.com/Gmeek/plugins/GmeekVercount.js'&gt;&lt;/script&gt;'}## --&gt;
```

### 2, TOC目录`GmeekTOC.js`
全站添加，只需要在config.json文件内添加配置
```
'script':'&lt;script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'&gt;&lt;/script&gt;',
```
单个文章页添加，只需要在文章最后一行添加如下
```
&lt;!-- ##{'script':'&lt;script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'&gt;&lt;/script&gt;'}## --&gt;
```

### 3. ArticleTOC目录`articletoc.js`
本插件由[Tiengming](https://code.buxiantang.top/)编写，也是一个非常不错的TOC目录插件。配置方式和上面一样，只需要替换地址为如下地址即可。
```
https://blog.meekdai.com/Gmeek/plugins/articletoc.js
```

### 4. 灯箱插件`lightbox.js`
本插件由[Tiengming](https://code.buxiantang.top/)编写，可以放大浏览文章中的图片，适合一些图片较多的文章。

全站添加，只需要在config.json文件内添加配置
```
'script':'&lt;script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'&gt;&lt;/script&gt;',
```
单个文章页添加，只需要在文章最后一行添加如下
```
&lt;!-- ##{'script':'&lt;script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'&gt;&lt;/script&gt;'}## --&gt;
```

### 5. 多插件使用

全站添加，所有文章页使用`TOC目录`和`灯箱插件`，需要这样添加配置文件：
```
'script':'&lt;script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'&gt;&lt;/script&gt;&lt;script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'&gt;&lt;/script&gt;',
```
单个文章页添加，单个文章使用`TOC目录`和`灯箱插件`，需要这样添加配置文件：
```
&lt;!-- ##{'script':'&lt;script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'&gt;&lt;/script&gt;&lt;script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'&gt;&lt;/script&gt;'}## --&gt;
```

&gt; [!CAUTION]
&gt; 需要特别注意区分`script` `head` `allHead` 等这些键的用途

I. 单篇文章自定义参数，自定义单篇文章页面的`style`和`script`
```html
&lt;!-- ##{'style':'&lt;style&gt;#postBody{font-size:20px}&lt;/style&gt;'}## --&gt;
```
```html
&lt;!-- ##{'script':'&lt;script async src='//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js'&gt;&lt;/script&gt;'}## --&gt;
```

II. 单篇文章多种自定义参数，可同时一起添加多种自定义参数：  
```html
&lt;!-- ##{'script':'&lt;script async src='//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js'&gt;&lt;/script&gt;','style':'&lt;style&gt;#postBody{font-size:20px}&lt;/style&gt;','timestamp':1490764800}## --&gt;
```

III. 全局文章自定义参数，添加全局文章页面的`style`和`script`，在`config.json`文件中添加
```javascript
'style':'&lt;style&gt;#postBody{font-size:20px}&lt;/style&gt;',
'script':'&lt;script async src='//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js'&gt;&lt;/script&gt;',
```



# 八、其他设置 👀 

### 1. 导入以前的文章 
如需修改发布时间，可以在文章最后一行添加如下代码。里面的时间是采用时间戳的形式，可以用如下[时间形式转换网站](https://tool.lu/timestamp)转换。  
```html
&lt;!-- ##{'timestamp':1490764800}## --&gt;
&lt;!-- ##{'script':'&lt;script async src='//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js'&gt;&lt;/script&gt;','style':'&lt;style&gt;#postBody{font-size:20px}&lt;/style&gt;','timestamp':1490764800}## --&gt;
```

### 2. 置顶博客文章
只需要`Pin issue`后，手动全局生成一次即可。

### 3. 删除文章
只需要`Close issue`或者`Delete issue`后，再手动全局生成一次即可。


$$$$$$$</description><guid isPermaLink="true">https://692.cloudns.be/post/Gmeek-gou-jian-wang-zhan-%EF%BC%88-jin-jie-pian-%EF%BC%89.html</guid><pubDate>Tue, 11 Mar 2025 16:05:47 +0000</pubDate></item><item><title>替换Google文档共享链接URL中的 edit ，转换为预览、复制、模板或导出PDF链接</title><link>https://692.cloudns.be/post/ti-huan-Google-wen-dang-gong-xiang-lian-jie-URL-zhong-de-%20edit%20%EF%BC%8C-zhuan-huan-wei-yu-lan-%E3%80%81-fu-zhi-%E3%80%81-mo-ban-huo-dao-chu-PDF-lian-jie.html</link><description>通过替换Google文档共享链接URL中的 *edit* ，您可以做一些非常巧妙的技巧。您可以将可共享链接转换为**预览**、**复制**、**模板**或**导出PDF**链接。

方法是将 `/edit` 替换为 `preview、copy、templatepreview、export?format=pdf 或 export/pdf`。

```md
preview
``` 
```md
copy
```
```md
template/preview
```
```md
export?format=/pdf
```
```md
mdexport/pdf
```
## 预览链接

***共享文档的整洁视图***  
→ 将*/edit*替换 为*/preview*

将 Google文档、表格、幻灯片或绘图中创建的内容发布为预览链接，可呈现没有菜单栏和按钮的文档。

示例：[优雅的图形宣言](https://docs.google.com/drawings/d/1sVZYYazblxw5lhO8ZlblHSe42y0ZhJpb1kTK-vYT9eM/preview)

+   与标准共享版本相比，预览文档在移动浏览器中的加载速度更快，效果也更好。对于没有移动应用的 Google Drawings 来说尤其如此。
    
+   预览文档中不会显示注释和幻灯片或画布之外的任何内容。此外，幻灯片演示文稿没有幻灯片分类器 — 演示文稿显示在演示文稿视图中。
    
+   预览链接的受众无法实时看到编辑内容。但是，每次加载页面时都会显示文档的最新版本。无需重新发布或重新共享文档即可更新预览版本。请注意，预览可能需要几分钟才能更新。
    
+   您从 Google 文档中获取的可共享链接可能在 /edit 后有一些额外的字符。不必担心。只需将 /edit 替换为 /preview。您可以保留或删除 /edit 后的内容，您的链接应该可以正常工作。
    
+   在 Google Slides中将*/edit*更改为*/preview?rm=minimal*可呈现底部没有导航栏的幻灯片。当您不希望观众跳过幻灯片时，这非常方便。（感谢 Shaun Creighton 在评论中提供此提示！）
    
+   由于预览链接会删除菜单，因此文档查看者将无法选择文件 → 制作副本以将副本添加到自己的 Google Drive。但是，如果您遇到文档的预览版本并希望制作副本，请尝试以下操作：将 URL 中的 /preview 替换为 /edit。然后您将看到带有菜单的版本，然后可以访问文件菜单来制作副本。
    
+   Google Doc 的预览链接不显示文档大纲（左侧的标题列表）。但是，您可以将 URL 修改为预览链接*并*显示文档大纲。只需将 /edit 替换为 /preview?rm=demo 即可。感谢[Wanda Terral](https://ignitionedu.com/2024/06/google-doc-demo-mode)提供的此提示。
    
+   将文档的预览 URL 添加到 Google 课堂帖子最终会恢复为原始版本，而不是预览版本。如果您想添加预览链接，请先将预览链接粘贴到[Bitly](http://bitly.com/)等 URL 缩短器中。复制 Bitly 提供的新链接。将缩短的链接添加到 Google 课堂中的帖子最终会打开预览版本。或者，您可以将预览链接粘贴到帖子正文中（而不是使用链接按钮添加链接）。
    

![制作复制图标](https://images.squarespace-cdn.com/content/v1/50eca855e4b0939ae8bb12d9/1502982823815-SMLPS8IQZAMUVXG3S0K4/image-asset.png)

## 制作复制链接

***强制其他人在查看您的文档之前进行复制***  
→ 将*/edit*替换 为*/copy*

您可能点击了 Google 文档、幻灯片、表格或绘图文件的链接，并且必须点击“制作副本”按钮才能继续。这种共享方法迫使用户复制原始文件，副本现在完全归用户所有并放置在她的 Google Drive 中。

如果您在 Google Workspace 中创建了文档，并希望学生拥有自己的副本，那么“制作副本”链接就非常适合。学生可以在自己的文档中填写空白、完成幻灯片、标记绘图、注释文本或完成某些任务（然后可能将其分享给老师）。这种共享方式还可用于与其他老师共享模板。他们只需点击即可制作自己的副本并对其进行自定义，而不会影响您的原件。

示例：[鼓励便条（打印在 1.5 x 2 英寸便签上）](https://docs.google.com/presentation/d/1qf_TVpBxkVgBdp-X22x99u8_WYM3x8axrzX1Hi1ewbM/copy?usp=sharing)

+   当教师发布包含 Google 文档的作业时，Google Classroom 会自动执行此过程。Classroom 提供了为每个学生制作副本的选项。
    
+   您从 Google 文档中获取的可共享链接可能在 /edit 后有一些额外的字符。不必担心。只需将 /edit 替换为 /copy。您可以保留或删除 /edit 后的内容，您的链接应该可以正常工作。
    
+   当您将 /edit 更改为 /copy 时，评论不会被复制。如果您想包含评论，请参阅下面的*使用评论链接制作副本***。**
    
+   当学生和教师制作副本时，他们拥有副本的全部所有权，原始文档所有者不再与副本相关联。如果第一个文档所有者对原始文档进行了更改，则这些更改将反映在未来的副本中，但不会更改已制作的文档副本。
    

![复制评论图标](https://images.squarespace-cdn.com/content/v1/50eca855e4b0939ae8bb12d9/1523975766724-6PTJ7TBUAY02YRTFED1E/Copy+with+Comments.png)

## 使用评论链接进行复制

***强制其他人在查看您的文档之前复制一份包含原始文档注释的副本***  
→ 将*/edit*替换 为*/copy?copyComments=true*

*此链接的作用与常规的“制作副本”*链接相同 ，但它还会将原始文档中的任何评论复制到副本中。如果您希望查看者看到并可能回复评论，这会很方便。评论可能包括附加信息、说明、清单和超链接。

示例：[Eric Curts 的《对称线》](https://docs.google.com/document/d/18ox23HzI4g0C0aJgi6ITLwpWD46Rd5ofvkWH2DJLzCA/copy?copyComments=true)

+   从原始文档复制的评论包含以下注释：“以上评论从原始文档复制”。
    
+   有关此类链接的更多信息，请阅读 Eric Curt 的文章《[如何强制复制带有预加载评论的文档来帮助您的学生》。](http://www.controlaltachieve.com/2017/11/force-copy-comments.html)
    
+   如果您在单击“评论”按钮之前突出显示文本或选择图像，则评论将与该选择相关联。
    
+   将文档的“制作带评论的副本”URL 添加到 Google 课堂帖子中最终会恢复为原始版本，而不是“复制带评论”版本。如果您想添加“复制带评论”链接，请先将链接粘贴到[Bitly](http://bitly.com/)等 URL 缩短器中。复制 Bitly 提供的新链接。将缩短的链接添加到 Google 课堂中的帖子最终会打开“制作带评论的副本”版本。或者，您可以将“制作带评论的副本”链接粘贴到帖子正文中（而不是使用链接按钮添加链接）。
    

![制作带有评论的副本](https://images.squarespace-cdn.com/content/v1/50eca855e4b0939ae8bb12d9/1561729650175-X21L5WIV33MBLF0K25NS/Make+a+Copy+with+Comments.png)

![模板图标](https://images.squarespace-cdn.com/content/v1/50eca855e4b0939ae8bb12d9/1502982857432-LWHNLOR2IIULLV4N0T0A/image-asset.png)

## 模板链接

***共享易于复制的文档预览***  
→将*/edit*替换 为*/template/preview*

使用模板链接共享文档内容并可选择复制 - 它是预览链接和复制链接的组合。

模板链接会显示文档的简洁版本。它还会显示“*使用模板”*按钮。单击此按钮会复制原始文档，副本现在完全归用户所有，并放置在她的 Google Drive 中。

模板链接非常适合让其他人在将文档复制到 Google Drive 之前查看文档。在网站和社交媒体上发布时，这些链接通常比“制作副本”链接更受欢迎，因为它们允许在盲目复制之前查看文档。

示例：[磁性诗歌](https://docs.google.com/drawings/d/1VceC_EgHOvzJ-mxMCJW1e7d9ipEFB3qF9sAvuoGTJJg/template/preview)

+   与单击*“制作副本”*按钮不同，单击*“使用模板”*不会在新复制的文档的文件名中添加“副本”。
    
+   模板链接的受众无法实时看到编辑内容。但是，每次加载页面时都会显示文档的最新版本。无需重新发布或重新共享文档即可更新模板版本。请注意，文档的预览可能需要几分钟才能更新。
    
+   您从 Google 文档中获取的可共享链接可能在 /edit 后有一些额外的字符。不必担心。只需将 /edit 替换为 /copy。您可以保留或删除 /edit 后的内容，您的链接应该可以正常工作。
    
+   iPhone 和 iPad 在模板链接方面有点奇怪。单击*“使用模板”*后，新复制的文档不会自动在文档、表格或幻灯片应用中打开。但是，当打开应用时，新文档就在那里。按*上次修改时间*排序可以更轻松地找到文档。
    
+   将文档的模板 URL 添加到 Google 课堂帖子最终会恢复为原始版本，而不是模板版本。如果您想添加模板链接，请先将模板链接粘贴到[Bitly](http://bitly.com/)等 URL 缩短器中。复制 Bitly 提供的新链接。将缩短的链接添加到 Google 课堂中的帖子最终会打开模板版本。或者，您可以将模板链接粘贴到帖子正文中（而不是使用链接按钮添加链接）。
    

![PDF 图标](https://images.squarespace-cdn.com/content/v1/50eca855e4b0939ae8bb12d9/1502982880518-UUSE0BQBGTWVY9FST2C9/image-asset.png)

## PDF 链接

***共享文档 PDF 版本的直接下载***  
→ Google 文档和表格：将*/edit*替换 为*/export?format=pdf*  
→ Google 幻灯片和绘图：将*/edit*替换 为*/export/pdf*

让网络浏览器通过 PDF 链接下载文档的 PDF 版本。点击链接后，会自动下载 PDF 版本，而不是在 Google 查看器或应用中显示文档。

当您想让其他人打印或保存您的文档时，PDF 链接非常有用。它们对于共享海报、信息图表和备忘单非常有用。

示例：[Google 课堂帖子选项](https://docs.google.com/drawings/d/1fvtnOG9iJRjtyKHxKeD2alssU635mhGHYqwzYITszys/export/pdf) 

+   由于 PDF 是一种通用格式，因此不需要 Google 帐户即可下载，也不需要打开该文件。
    
+   PDF 文件可以在任意应用程序中打开：Adobe Reader、Preview、Google Drive、Foxit Reader、Explain Everything 等。
    
+   自动下载不会出现在电脑的浏览器窗口中。点击后，人们很容易忘记文件已被下载。请务必标记您的 PDF 链接，以便其他人知道将下载文件。
    
+   下载文件存放的位置取决于浏览器、计算机和设置。收件人可能会被提示重命名文件并选择位置。或者，下载的文件可能会自动放置在“下载”文件夹或桌面上。
    
+   超链接在 PDF 中有效。文档中已超链接的任何文本、图像或形状都将在 PDF 版本中保持链接状态。
    
+   直接下载不仅限于 PDF。其他文件类型也适用。不要在 URL 中使用*pdf*，请尝试使用*png、jpg、pptx、xlsx、docx、html*或*txt*。
    
+   您从 Google 文档中获取的可共享链接可能在 /edit 后有一些额外的字符。不必担心。只需将 /edit 替换为 /copy。您可以保留或删除 /edit 后的内容，您的链接应该可以正常工作。
    
+   如果您希望 PDF 显示在浏览器中，您可以使用 Google 的在线文档查看器。在 PDF 链接开头添加*https://docs.google.com/viewer?url= 。*[单击查看示例。](https://docs.google.com/viewer?url=https://docs.google.com/drawings/d/1fvtnOG9iJRjtyKHxKeD2alssU635mhGHYqwzYITszys/export/pdf)
    

![撤销](https://images.squarespace-cdn.com/content/v1/50eca855e4b0939ae8bb12d9/1502983319038-8O4BO5EBY4XT64MTISIT/image-asset.png)

### **额外提示**

遇到别人伪造的链接？您可以对预览、制作副本、模板或 PDF 链接进行逆向工程，以常规方式查看文档，方法是将*/preview、/copy、/template/preview、/export?format=pdf 或 /export/pdf*替换为*/edit*。

[chrome相关插件](https://chrome.google.com/webstore/detail/sir-links-a-lot/cggpkbnlnicoanmphgkkcmidbpdacepn/related?hl=en-US)$$$$$$$</description><guid isPermaLink="true">https://692.cloudns.be/post/ti-huan-Google-wen-dang-gong-xiang-lian-jie-URL-zhong-de-%20edit%20%EF%BC%8C-zhuan-huan-wei-yu-lan-%E3%80%81-fu-zhi-%E3%80%81-mo-ban-huo-dao-chu-PDF-lian-jie.html</guid><pubDate>Mon, 10 Mar 2025 11:20:47 +0000</pubDate></item><item><title>公共DNS</title><link>https://692.cloudns.be/post/gong-gong-DNS.html</link><description># 国内

## 114DNS
```md
114.114.114.114
```
## 阿里公共DNS:
IPv4：
```md
223.5.5.5  
```
备选：223.6.6.6  
IPv6：2400:3200::1  
IPV6: 2400:3200:baba::1  
DoH：https://223.5.5.5/dns-query  
DoH：https://223.6.6.6/dns-query  
DoH：https://dns.alidns.com/dns-query  
DoT：dns.alidns.com  
DoT：223.5.5.5  
DoT：223.6.6.6

## 腾讯公共DNS(DNSPod):
IPv4： 
```md
119.29.29.29
```
IPV6:2402:4e00::  
DoH：https://doh.pub/dns-query  
DoH：https://1.12.12.12/dns-query  
DoH：https://120.53.53.53/dns-query  
DoH：https://sm2.doh.pub/dns-query (国密)  
DoT：dot.pub  
DoT：1.12.12.12  
DoT：120.53.53.53

## 百度公共DNS：
IPv4: 
```md
180.76.76.76
```
IPV6: 2400:da00::6666

## 360公共DNS:
电信/铁通/移动IPv4: 101.226.4.6  
电信/铁通/移动IPv4: 218.30.118.6  
联通IPv4: 123.125.81.6  
联通IPv4: 140.207.198.6  
DoH: https://doh.360.cn  
DoT: dot.360.cn

## CNNIC DNS:
IPV4: 1.2.4.8  
IPV4: 210.2.4.8
IPV6: 2001:dc7:1000::1

# 境外

## Google公共DNS：
IPv4：
```md
8.8.8.8
```
IPv4：8.8.4.4  
IPV6: 2001:4860:4860::8888  
IPV6: 2001:4860:4860::8844)  
DoH地址：https://dns.google/dns-query  
DoH地址：https://8.8.8.8/dns-query  
DoH地址：https://8.8.4.4/dns-query  
DoT:dns.google  
DoT:8.8.8.8  
DoT:8.8.4.4

## Cloudflare公共DNS:
IPv4: 
```md
1.1.1.1
```
IPV4: 1.0.0.1  
IPV6: 2606:4700:4700::1111  
IPV6: 2606:4700:4700::1001  
DoH: https://1.1.1.1/dns-query  
DoH: https://1.0.0.1/dns-query  
DoH: https://cloudflare-dns.com/dns-query  
DoT：1.1.1.1
DoT：1.0.0.1
DoT：1dot1dot1dot1.cloudflare-dns.com
DoT：cloudflare-dns.com
DoT：one.one.one.one

## 台湾Quad 101(twnic):
IPV4: 101.101.101.101
IPV4: 101.102.103.104
IPV6: 2001:de4::101
IPV6: 2001:de4::102
DoH: https://dns.twnic.tw/dns-query 

## DNS.SB公共DNS:
IPv4: 185.222.222.222  
IPV4: 45.11.45.11  
DoH: https://doh.sb/dns-query (或者：https://doh.dns.sb/dns-query两个指向一样，只是域名不一样)
DoH: https://45.11.45.11/dns-query  
DoH: https://185.222.222.222/dns-query  
DoT: dot.sb  
DoT: 185.222.222.222
DoT: 45.11.45.11
DoH香港节点: https://hk-hkg.doh.sb/dns-query  (更多分节点：[https://dns.sb/doh/](https://dns.sb/doh/)，可以根据自己的位置选择速度快一些的节点。)  

## AdGuard 公共DNS:
IPV4默认过滤广告: 94.140.14.14  
IPV4默认过滤广告：94.140.15.15  
IPV4无过滤: 94.140.14.140  
IPV4无过滤:94.140.14.141  
IPV4家庭保护(过滤广告与成人内容)：94.140.14.15  
IPV4家庭保护(过滤广告与成人内容)：94.140.15.16  
DoH默认过滤广告：https://dns.adguard.com/dns-query  
DoH家庭保护(过滤广告与成人内容)：https://dns-family.adguard.com/dns-query  
DoH非过滤：https://dns-unfiltered.adguard.com/dns-query  
DoT默认过滤广告：dns.adguard.com  
DoT家庭保护(过滤广告与成人内容)：dns-family.adguard.com  
DoT非过滤：dns-unfiltered.adguard.com

## OpenDNS(Cisco):
IPv4：208.67.222.222  
IPv4：208.67.220.220  
IPV4 Family: 208.67.222.123  
IPV4 Family: 208.67.220.123  
IPV6: 2620:0:ccc::2  
IPV6: 2620:0:ccd::2  
DoH：https://doh.opendns.com/dns-query  
DoH Family：https://doh.familyshield.opendns.com/dns-query  
DoT: dns.umbrella.com

## IBM Quad9:
IPv4默认安全：9.9.9.9  
IPv4默认安全：149.112.112.112  
IPv6默认安全: 2620:fe::fe  
IPv6默认安全: 2620:fe::fe:9  
DoH默认：https://dns.quad9.net/dns-query  
DoT默认：dns.quad9.net  
IPv4无过滤：9.9.9.10  
IPv4无过滤：149.112.112.10  
IPv6无过滤: 2620:fe::10  
IPv6无过滤: 2620:fe::fe:10  
DoH无过滤：https://dns10.quad9.net/dns-query  
DoT无过滤：dns10.quad9.net  
IPv4 ECS保护：9.9.9.11  
IPv4 ECS保护：149.112.112.11  
IPv6 ECS保护: 2620:fe::11  
IPv6 ECS保护: 2620:fe::fe:11  
DoH ECS保护：https://dns11.quad9.net/dns-query  
DoT ECS保护：dns11.quad9.net$$$$$$$</description><guid isPermaLink="true">https://692.cloudns.be/post/gong-gong-DNS.html</guid><pubDate>Sun, 09 Mar 2025 12:12:46 +0000</pubDate></item><item><title>好用的网页内容转markdown工具</title><link>https://692.cloudns.be/post/hao-yong-de-wang-ye-nei-rong-zhuan-markdown-gong-ju.html</link><description>一.在线工具推荐：

**1.devtool**

在线地址：[https://devtool.tech/html-md](https://devtool.tech/html-md)  
用法一：十分简单，只需要在左边页面地址处填入网址，并按Enter，就可以在右边看见生成的markdown格式的内容，复制使用即可。

用法二：只需要在左边内容处填入html代码，就可以在右边看见对应的markdown格式内容，复制使用即可  
![在这里插入图片描述](https://i-blog.csdnimg.cn/blog_migrate/254edc07bba5b549aef7cfce0a786f61.png)  
**2.helloworld**

在线地址：[https://www.helloworld.net/html2md](https://www.helloworld.net/html2md)

helloworld 开发者社区开源的一个轻量级，强大的 html 一键转 md 工具，支持多平台文章一键转换，并保存下载到本地。

![在这里插入图片描述](https://i-blog.csdnimg.cn/blog_migrate/093225ba1148f42a6633d7520c4dfbb1.png)

### 二.google插件

**1.MaoXian Web Clipper**

插件地址：[MaoXian Web Clipper](https://chromewebstore.google.com/detail/markdownload-markdown-web/pcmpcfapbekmbjjkdalcgopdkipoggdi)

MaoXian Web Clipper 是一个免费的可以剪藏网页到本地硬盘的浏览器扩展。当你想要将网页保存下来时，它可以让你“按需裁剪”摘录网页上想要的部分内容，并将网页剪藏永久保存到本地电脑磁盘里。以此避免网站挂掉、文章帖子被删除、或图片失效等问题……MaoXian Web Clipper 网页剪藏插件支持 Chrome 谷歌浏览器 以及 FireFox 火狐浏览器。扩展完全免费，直接安装就能使用。

![在这里插入图片描述](https://i-blog.csdnimg.cn/blog_migrate/ef444a6a10a15ecee0306f28db462447.png)

**2.Copy as Markdown**

插件地址：[Copy as Markdown](https://chromewebstore.google.com/detail/copy-as-markdown/fkeaekngjflipcockcnpobkpbbfbhmdn)  
Copy as Markdown 是一个 Chrome 扩展程序，可以帮助您将以下内容作为 Markdown 复制到系统剪贴板：

+   当前选项卡作为链接
+   页面上的链接 - 如果链接中包含图像，复制的 Markdown 将采用该图像作为链接文本。
+   页面上的图像 - 所有选项卡作为链接列表 - 选择链接列表的选项卡 您还可以自定义键盘快捷键，无需单击鼠标即可复制选项卡的链接。
+   已知问题 - 复制图像时无法抓取 image.alt - 在 Microsoft Windows 上，复制的页面链接不附带链接标题

**3.网页转成markdown**

插件地址：[网页转成md格式](https://chromewebstore.google.com/detail/%E7%BD%91%E9%A1%B5%E8%BD%ACmarkdown/ngccckdpjacopmhmlanmmmncgfjnenac?hl=zh-CN)  
一款快速提取网页内容，并格式化为markdown的工具，主要用于笔记、文章的整理。

+   支持一键将当前网页转行为markdown格式。 对各大平台网页等文章、博客类型网页效果最好。
+   生成的markdown支持二次编辑，生成的markdown自动适配并生成了GZH文章，支持一键复制粘贴。
+   支持对生成的文章转换为图片保存，支持自定义markdown css  
    ![在这里插入图片描述](https://i-blog.csdnimg.cn/blog_migrate/3879a172c8a138ad02c12a93a8aa3e61.png)  
    参考：  
    1.[有什么好办法，将网页内容保存为 markdown](https://www.v2ex.com/t/949166)$$$$$$$</description><guid isPermaLink="true">https://692.cloudns.be/post/hao-yong-de-wang-ye-nei-rong-zhuan-markdown-gong-ju.html</guid><pubDate>Sat, 08 Mar 2025 16:28:46 +0000</pubDate></item><item><title>世界上最小办公套件：文本编辑、表格、绘图、幻灯片……</title><link>https://692.cloudns.be/post/shi-jie-shang-zui-xiao-ban-gong-tao-jian-%EF%BC%9A-wen-ben-bian-ji-%E3%80%81-biao-ge-%E3%80%81-hui-tu-%E3%80%81-huan-deng-pian-%E2%80%A6%E2%80%A6.html</link><description>**Awfice** 是一款世界上最小的办公套件工具，包括文本编辑、表格、绘图、幻灯片、代码编辑器、计算器，每款工具均不到 1KB，实际上都只是一行代码，纯 HTML 网页，即开即用，无任何附加功能，包括保存。@[Appinn](https://www.appinn.com/awfice/)

+   文本编辑器 
+   电子表格 
+   绘图
+   幻灯片
+   代码编辑器
+   计算器 


**在使用 Awfice 输入了内容之后，可以将其保存为本地的 HTML 文件，然后带走就行了。一个 .html 文件就是一个文本、电子表格、幻灯片。**



### 文本编辑器

一个简单的富文本编辑器。键入你想要的任何内容，它不会保存在任何地方，但它可能方便快速一次性笔记。Ctrl+B 和 Ctrl+I 将文本选择标记为**粗体或斜体**。撤消/重做也应该有效。还可以从其他来源复制/粘贴文本和图像。

复制并添加到书签或在 URL 栏中打开：

```md
data:text/html,&amp;lt;body contenteditable style=line-height:1.5;font-size:20px
```

把上面这行放到地址栏里，回车，就能用这款文本编辑器了。

另外，在线版本：[试试吧！](https://htmlpreview.github.io/?https://github.com/zserge/awfice/blob/main/edit.html)

### 电子表格

一个带有数学公式的非常基本的电子表格。它有 100 行和 26 列 （A~Z）。如果单元格中的值以“=”开头，则将其计算为公式，可以引用其他单元格值，如“=(A10+A11)/A12”。在内部下它使用了 eval() 来执行公式，所以要小心。因为它可以执行任何 JavaScript 代码，包括恶意代码。

复制并添加到书签或在 URL 栏中打开：

```md
data:text/html,&amp;lt;table id=t&amp;gt;&amp;lt;script&amp;gt;z=Object.defineProperty,p=parseFloat;for(I=[],D={},C={},q=_=&amp;gt;I.forEach(e=&amp;gt;{try{e.value=D[e.id]}catch(e){}}),i=0;i&amp;lt;101;i++)for(r=t.insertRow(-1),j=0;j&amp;lt;27;j++)c=String.fromCharCode(65+j-1),d=r.insertCell(-1),d.innerHTML=i?j?'':i:c,i*j&amp;amp;&amp;amp;I.push(d.appendChild((f=&amp;gt;(f.id=c+i,f.onfocus=e=&amp;gt;f.value=C[f.id]||'',f.onblur=e=&amp;gt;{C[f.id]=f.value,q()},get=_=&amp;gt;{v=C[f.id]||'';if('='!=v.charAt(0))return isNaN(p(v))?v:p(v);with(D)return eval(v.slice(1))},a={get},z(D,f.id,a),z(D,f.id.toLowerCase(),a),f))(document.createElement`input`)))&amp;lt;/script&amp;gt;&amp;lt;style&amp;gt;#t{border-collapse:collapse}td{border:1px solid gray;text-align:right}input{border:none;width:4rem;text-align:center}
```

[试试吧！](https://htmlpreview.github.io/?https://github.com/zserge/awfice/blob/main/calc.html)

### 绘图应用程序

没有什么比用鼠标在空白画布上绘图更简单的了。也适用于触摸屏。要保存结果…好吧，做一个截图也许…

复制并添加到书签或在 URL 栏中打开：
```md
data:text/html,&lt;canvas id=v&gt;&lt;script&gt;d=document,d.body.style.margin=0,P='onpointer',c=v.getContext`2d`,v.width=innerWidth,v.height=innerHeight,c.lineWidth=2,f=0,d[P+'down']=e=&gt;{f=e.pointerId+1;e.preventDefault();c.beginPath();c.moveTo(e.x,e.y)};d[P+'move']=e=&gt;{f==e.pointerId+1&amp;&amp;c.lineTo(e.x,e.y);c.stroke()},d[P+'up']=_=&gt;f=0&lt;/script&gt;&lt;/canvas&gt;
```

[试试吧！](https://htmlpreview.github.io/?https://github.com/zserge/awfice/blob/main/draw.html)

### 演示文稿制作器

只是带有一些快捷键的富文本编辑器的变体。有 50 张空白幻灯片供您使用（我希望你不需要用更多幻灯片让观众感到厌烦）。每张幻灯片都是一个富文本编辑器，但有一些快捷键：

+   Ctrl+Alt+1：标题
+   Ctrl+Alt+2：普通样式
+   Ctrl+Alt+3：左对齐
+   Ctrl+Alt+4：居中对齐
+   Ctrl+Alt+5：右对齐
+   Ctrl+Alt+6：缩进
+   Ctrl+Alt+7：缩进
+   Ctrl+Alt+8：制作列表

复制并添加到书签或在 URL 栏中打开：

```md
data:text/html,&amp;lt;body&amp;gt;&amp;lt;script&amp;gt;d=document;for(i=0;i&amp;lt;50;i++)d.body.innerHTML+='&amp;lt;div style='position:relative;width:90%;padding-top:60%;margin:5%;border:1px solid silver;page-break-after:always'&amp;gt;&amp;lt;div contenteditable style=outline:none;position:absolute;right:10%;bottom:10%;left:10%;top:10%;font-size:5vmin&amp;gt;';d.querySelectorAll('div&amp;gt;div').forEach(e=&amp;gt;e.onkeydown=e=&amp;gt;{n=e.ctrlKey&amp;amp;&amp;amp;e.altKey&amp;amp;&amp;amp;e.keyCode-49,f='formatBlock',j='justify',x=[f,f,j+'Left',j+'Center',j+'Right','outdent','indent','insertUnorderedList'][n],y=['&amp;lt;h1&amp;gt;','&amp;lt;div&amp;gt;'][n],x&amp;amp;&amp;amp;d.execCommand(x,!1,y)})&amp;lt;/script&amp;gt;&amp;lt;style&amp;gt;@page{size:6in 8in landscape}@media print{*{border:0 !important}}
```

[试试吧！](https://htmlpreview.github.io/?https://github.com/zserge/awfice/blob/main/beam.html)

### 代码编辑器

一个简单的代码编辑器。你可以输入 HTML，CSS 和 Javascript。

复制并添加到书签或在 URL 栏中打开：

```md
&lt;html&gt;
&lt;body&gt;
&lt;!--StartFragment--&gt;
data:text/html,&lt;body oninput='i.srcdoc=h.value+'&lt;style&gt;'+c.value+'&lt;/style&gt;&lt;script&gt;'+j.value+'&lt;/script&gt;''&gt;&lt;style&gt;textarea,iframe{width:100%;height:50%;}body{margin:0;}textarea{width: 33.33%;font-size:18px;padding:0.5em}&lt;/style&gt;&lt;textarea placeholder='HTML' id='h'&gt;&lt;/textarea&gt;&lt;textarea placeholder='CSS' id='c'&gt;&lt;/textarea&gt;&lt;textarea placeholder='JS' id='j'&gt;&lt;/textarea&gt;&lt;iframe id='i'&gt;&lt;/iframe&gt;&lt;script&gt;document.querySelectorAll('textarea').forEach((t)=&gt;t.addEventListener('keydown',function(t){var e,s;'Tab'==t.key&amp;&amp;(t.preventDefault(),e=this.selectionStart,s=this.selectionEnd,this.value=this.value.substring(0,e)+'  '+this.value.substring(s),this.selectionStart=this.selectionEnd=e+1)}))&lt;/script&gt;&lt;/body&gt;
```
[试试吧！](https://htmlpreview.github.io/?https://github.com/zserge/awfice/blob/main/code.html)

### 计算器

一个简单的计算器，支持基本操作符号进行计算。

复制并添加到书签或在 URL 栏中打开：

```md
data:text/html,&lt;table style='text-align: center;width:80vw;margin: 0 auto;'&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td colspan='4'&gt;&lt;textarea&gt;&lt;/textarea&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;script&gt;let d=document;let tbl=d.querySelector('tbody');let z=d.querySelector('textarea');let oc=(x)=&gt;z.value+=x;let cl=()=&gt;z.value='';let re=()=&gt;{try{z.value=eval(z.value);}catch(error){cl();}};[[1,2,3,'+'],[4,5,6,'-'],[7,8,9,'*'],['C',0,'=','/']].forEach((a)=&gt;{let r=d.createElement('tr');r.style.lineHeight='64px';tbl.appendChild(r);a.forEach((b)=&gt;{let tb=d.createElement('tb');tb.innerText=b;tb.style.padding='16px';tb.style.border='1px solid';r.appendChild(tb);tb.onclick=b==='='?re:b==='C'?cl:()=&gt;oc(b);})})&lt;/script&gt;&lt;/table&gt;
```

[试试吧！](https://htmlpreview.github.io/?https://github.com/zserge/awfice/blob/main/calculator.html)

## 视频

青小蛙也录了一段视频：

大概就是这样了，#[竟然还可以这样](https://www.appinn.com/tag/%E7%AB%9F%E7%84%B6%E8%BF%98%E5%8F%AF%E4%BB%A5%E8%BF%99%E6%A0%B7/)。至于用途，我也#[不知道怎么用](https://www.appinn.com/tag/%E4%B8%8D%E7%9F%A5%E9%81%93%E6%80%8E%E4%B9%88%E7%94%A8/)呀 😂

## 获取

+   [GitHub](https://github.com/zserge/awfice)

最后，提醒一下：

+   无存储，无论键入什么内容，都会在页面刷新时丢失
+   开发者说「这是一个半开玩笑的项目」，但在 GitHub 已经有 2.5k 个星星了。
+   保存的唯一方法是保存 HTML 或将其发送到打印机/打印为 PDF。[](https://github.com/zserge/awfice#text-editor---59-bytes)

* * *

原文：https://www.appinn.com/awfice/$$$$$$$</description><guid isPermaLink="true">https://692.cloudns.be/post/shi-jie-shang-zui-xiao-ban-gong-tao-jian-%EF%BC%9A-wen-ben-bian-ji-%E3%80%81-biao-ge-%E3%80%81-hui-tu-%E3%80%81-huan-deng-pian-%E2%80%A6%E2%80%A6.html</guid><pubDate>Sat, 08 Mar 2025 10:57:21 +0000</pubDate></item><item><title>分享个一键查当前网站 IP 归属地的「书签」（附带查是不是 Cloudflare CDN）</title><link>https://692.cloudns.be/post/fen-xiang-ge-yi-jian-cha-dang-qian-wang-zhan-%20IP%20-gui-shu-di-de-%E3%80%8C-shu-qian-%E3%80%8D%EF%BC%88-fu-dai-cha-shi-bu-shi-%20Cloudflare%20CDN%EF%BC%89.html</link><description>我平时可能经常需要**查一下当前网站的 IP 地址及归属地**，为了方便我自己写了个简短的脚本放在书签中。

&gt; 比如有时候发现某网站慢的要死，我就会看看是不是用的 Cloudflare CDN，是的话就加到 Hosts 文件中。

平时大家如果要查当前网站的 IP 归属地还需要去专门的查询网站，二我今天闲的没事就分享下该书签，指不定有人会需要呢~

* * *

## \# 查当前网站 IP 归属地「书签」

**新建书签**，**网址**写下面这段脚本代码（书签名随意），**保存即可**。

```js
javascript:(function(){window.open('https://ip.mcr.moe/?ip=' + location.hostname,'target','');})()
```

这样你在任意网页下**点击该书签**，即可显示该网站 IP 归属地。

例如在 Github 任意网页下点击大概显示如下：

```
{
    'status': 200,
    'message': 'OK',
    'addr': '52.74.223.119',        # IP
    'country': '新加坡',            # 国家
    'area': ' Singapore',           # 地区
    'provider': 'Amazon数据中心'   # 提供者，如果该网站用的是 Cloudflare CDN 则这里也会写 Cloudflare 的
}
```

* * *

这其实就是一个查询 IP 归属地的 API，点击这个书签就是把当前网站的域名加到 API 地址末尾并访问罢了。

* * *

## \# 查当前网站是不是 Cloudflare CDN「书签」

**新建书签**，**网址**写下面这段脚本代码（书签名随意），**保存即可**。

```js
javascript:(function(){window.open(location.origin + '/cdn-cgi/trace','target','');})()
```

这样你在任意网页下**点击该书签**，就会打开 `域名/cdn-cgi/trace` 这个地址，如果能访问就代表用的是 Cloudflare CDN。

例如在 Cloudflare 官网任意网页下点击大概显示如下：

```
fl=100f16
h=www.cloudflare.com
ip=XXX.XXX.XXX.XXX           # 你的 IP
ts=1613267817.838
visit_scheme=https
uag=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36
colo=MUC                    # 当前 CDN 节点物理地址，这是当地机场缩写，可以去搜索 'MUC 机场' 关键词获得具体位置
http=http/2
loc=CN                      # 你所处位置
tls=TLSv1.3
sni=plaintext
warp=off
gateway=off
```

* * *

这其实就是利用任何使用 Cloudflare CDN 节点的网站（包括 CDN IP 本身）都能在后面加上 `/cdn-cgi/trace` 访问获取当前节点信息。
https://github.com/XIU2/CloudflareSpeedTest/discussions/66$$$$$$$</description><guid isPermaLink="true">https://692.cloudns.be/post/fen-xiang-ge-yi-jian-cha-dang-qian-wang-zhan-%20IP%20-gui-shu-di-de-%E3%80%8C-shu-qian-%E3%80%8D%EF%BC%88-fu-dai-cha-shi-bu-shi-%20Cloudflare%20CDN%EF%BC%89.html</guid><pubDate>Fri, 07 Mar 2025 07:36:36 +0000</pubDate></item><item><title>特殊符号</title><link>https://692.cloudns.be/post/te-shu-fu-hao.html</link><description>## 这是什么？

这些特殊符号是真实的文字和可复制并粘贴到任何地方，比如像微软的Word，脸谱，微博，HTML或博客。 点击图标复制到剪贴板

## 热门符号

ღ•⁂€™↑→↓⇝√∞░▲▶◀●☀☁☂☃☄★☆☉☐☑☚☛☜☝☞☟☠☢☣☪☮☯☸☹☺☻☼☽☾♔♕♖♗♘♚♛♜♝♞♟♡♨♩♪♫♬✈✉✎✓✔✘✚✞✟✠✡✦✧✩✪✮✯✹✿❀❁❂❄❅❆❝❞❣❤❥❦➤

## 常用符号

### 国际象棋符号 [列表视图](https://cn.piliapp.com/symbol/chess/)

♔♕♖♗♘♙♚♛♜♝♞♟

### 音符符号 [列表视图](https://cn.piliapp.com/symbol/music/)[emoji](https://cn.piliapp.com/emoji/list/music/ '音樂表情符號')

♩♪♫♬♭♮♯𝄞𝄡𝄢𝄪𝄫🎵🎶🎼𓏢

### 天气符号 [列表视图](https://cn.piliapp.com/symbol/weather/)[emoji](https://cn.piliapp.com/emoji/list/weather/ '天气表情符号')

太阳，月亮，雨，云，流星，伞，温泉，堆雪人，冰晶符号。

ϟ☀☁☂☃⛆⛇⛈︎☄☉☼☽☾♁♨❄❅❆༄࿓𐓷𐓏𖤓𖣔

### 商业符号 [列表视图](https://cn.piliapp.com/symbol/business/)

©®℗℠™℡℻℀℁℅℆

### 物体符号

☏✁✂✃✄✆✇✈✉✎✏✐✑✒𓍝⚐⚑⚖⚗⚿⛟⛨⛫⛾⛿⎈࿄𖠦𖠿ꗃ𓄲𓊔𖤘𖣘߷𖠚𖠜𖡡𖥣𖥔𖥠⌖⊹𓊝𖠎𖡌𖣳𖤠𖥈𖥩𖧶ꚰ⛀⛁⛂⛃

### 技术符号 [列表视图](https://cn.piliapp.com/symbol/tech/)

房子，麦金塔命令键，苹果，回车键，核能，病毒和HD符号。

⏎⇧⏏⌂⌘⎋⊞⌨↹⌥⌫⎗⎘⎙⎵⇥

### 单色表情符号 [列表视图](https://cn.piliapp.com/symbol/monochrome/)

彩色表情符号的黑白版本。优化了像Facebook和Twitter这样的平台，它们以单色显示它们。

☺︎☹︎☠︎❣︎❤︎☘︎⛸︎♠︎♥︎♦︎♣︎♟︎⛷︎⛰︎⛩︎♨︎⛴︎✈︎☀︎⏱︎⏲︎☁︎⛈︎☂︎⛱︎❄︎☃︎☄︎⛑︎☎︎⌨︎✏︎✒︎✉︎✂︎⛏︎⚒︎⚔︎⚙︎⚖︎⛓︎⚗︎⚰︎⚱︎⚠︎☢︎☣︎⬆︎↗︎➡︎↘︎⬇︎↙︎⬅︎↖︎↕︎↔︎↩︎↪︎⤴︎⤵︎⚛︎✡︎☸︎☯︎✝︎☦︎☪︎☮︎▶︎⏭︎⏯︎◀︎⏮︎⏸︎⏹︎⏺︎⏏︎♀︎♂︎⚧︎✖︎♾︎‼︎⁉︎⚕︎♻︎⚜︎☑︎✔︎〽︎✳︎✴︎❇︎©︎®︎™︎🅰︎🅱︎ℹ︎Ⓜ︎🅾︎🅿︎🈂︎🈷︎㊗︎㊙︎◼︎◻︎▪︎▫︎

### 杂项符号 [列表视图](https://cn.piliapp.com/symbol/misc/)

⛐⛍⛕⛖⛗⛘⛙⛜⛠⛚⛛⛞⛡♲♳♴

### 菜单 [列表视图](https://cn.piliapp.com/symbol/menu/)

☰≡Ξ㊂≣⁝⋮︙⦙⁞⋯…∷▲▼▶

### 星座符号 [列表视图](https://cn.piliapp.com/symbol/zodiac/)[emoji](https://cn.piliapp.com/emoji/list/constellation/ '星座表情符号')

星座，占星术和十二生肖。

♓♒♑♐♏♎♍♌♋♊♉♈☉☽☿♀

### 打勾符号 [列表视图](https://cn.piliapp.com/symbol/tick/)[emoji](https://cn.piliapp.com/emoji/list/check-mark/ '复选标记表情符号')

✓✔✖✗✘∛∜⍻☐☑☒□■○●༝྾∨🆅🆇🅥🅧⊗

### 扑克牌花色符号 [列表视图](https://cn.piliapp.com/symbol/card-suit/)[emoji](https://cn.piliapp.com/emoji/list/playing-cards/ '扑克牌')

心形、方块、梅花和黑桃的符号图标，包括一整套的纸牌花色。

♡♢♤♧♣♦♥♠🂠🂡🂢🂣🂤🂥🂦🂧

### 骰子符号 [列表视图](https://cn.piliapp.com/symbol/dice/)[工具](https://cn.piliapp.com/random/dice/)

⚀⚁⚂⚃⚄⚅

### 单位符号 [列表视图](https://cn.piliapp.com/symbol/unit/)

长度单位，温度的单位，面积单位，摄氏、 华氏符号

μ°℃℉㎍㎎㎏℥㏌㎚㎛㎜㎝㎞²³㎖㎗㎘㏄㏖㏒㎅㎆㎇㎈㎉㎐㎑㎒㎓㎾Ω㏑㏈㏐㏂㏘㎳㎭㏅㎪㏗′″

### 数字符号 [列表视图](https://cn.piliapp.com/symbol/number/)[emoji](https://cn.piliapp.com/emoji/list/number/ '数字表情符号')

ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫⅰⅱⅲⅳⅴⅵⅶⅷⅸⅹⅺⅻ⓪①②③④⑤⑥⑦⑧⑨⑩⓵⓶⓷⓸⓹⓺⓻⓼⓽⓾➀➁➂➃➄➅➆➇➈➉➊➋➌➍➎➏➐➑➒➓⑴⑵⑶⑷⑸⑹⑺⑻⑼⑽⓿❶❷❸❹❺❻❼❽❾❿㈠㈡㈢㈣㈤㈥㈦㈧㈨㈩㊀㊁㊂㊃㊄㊅㊆㊇㊈㊉０１２３４５６７８９𝟬𝟭𝟮𝟯𝟰𝟱𝟲𝟳𝟴𝟵

## 印刷符号

### 标点符号 [列表视图](https://cn.piliapp.com/symbol/punctuation/)

˙‥‧‵、。﹐﹒﹔﹕！＃＄％＆＊，．：；？＠～•…·.ᐟ¡¿¦¨¯´·¸º‽‼⁏※†‡ˉ˘⁇⁈⁉ˆ⁊⸘№

### 括号符号 [列表视图](https://cn.piliapp.com/symbol/brackets/)

〈〉《》「」『』【】〔〕︵︶︷︸︹︺︻︼︽︾︿﹀﹁﹂﹃﹄﹙﹚﹛﹜﹝﹞﹤﹥（）＜＞｛｝❬❭❮❯❰❱〖〗〘〙〚〛⟨⟩‹›«»｢｣⌃⌄⌵⌢⌣⎴⏜⏝⏞⏟⏠⏡

### 引号 [列表视图](https://cn.piliapp.com/symbol/quotation-mark/)

''«»‘’‚‛“”„‟‹›❛❜❝❞〝〞〟〃＂＇′″‴⁗‵‶‷\`ˊ

### 段落标记 [列表视图](https://cn.piliapp.com/symbol/pilcrow/)

§¶❡⁋※

### 机密文本符号 [列表视图](https://cn.piliapp.com/symbol/confidential/)[蚂蚁文产生器](https://cn.piliapp.com/cool-text/invisible-ink/)

█▀▄▌▐▗▘▙▚▛▜▝▞▟▖░▒▓◼●⬛⬜⚫⚪

## 人物符号

### 人员和活动 展开 [列表视图](https://cn.piliapp.com/symbol/activity/)

𓀞𓀟𓀠𓀡𓀢𓀣𓀤𓀥𓀦𓀧𓀨𓀩𓀪𓀫𓀬𓀀

𓁆𓁇𓁈𓁉𓁊𓁋𓁌𓁍𓁎𓁏𓁐𓁑𓁒𓁓𓁔𓁕

𓀭𓀮𓀯𓀰𓀱𓀲𓀳𓀴𓀵𓀶𓀷𓀸𓀹𓀺𓀻𓀼

### 脸和笑脸符号 [颜文字](https://cn.piliapp.com/emoticon/)

脸，眼睛，笑脸，男性，女性符号。

☹☺☻〠ヅツ㋡쓰üت⍢⍨ᴗ̈⚇⚉𓁷𓁶𓂈𓂎ဩඩ𖥶𖦆𖠔𖤑冏웃유𖧀𖠋𖨆ⶆ𖦔𖤾𖦯𖧱

### 眼睛符号 [列表视图](https://cn.piliapp.com/symbol/eye/)[emoji](https://cn.piliapp.com/emoji/list/eye/ '眼睛表情符号')

𓂀𓁿𓁾𓁽𓁼𓁻𓁺𓁹𓂉𓂊𓎲𓎱ಠʘಥஇ

### 性别符号 [列表视图](https://cn.piliapp.com/symbol/gender/)

⚤♂♀☿⚣⚥⚦⚧⚨⚢⚲

### 心形符号 [列表视图](https://cn.piliapp.com/symbol/heart/)[emoji](https://cn.piliapp.com/emoji/list/heart/ '爱心符号')

心脏和爱情的文字符号。

♡♥❣❤❦❧❥☙დღოᦂᦦʚɞᏬ

### 手符号 [emoji](https://cn.piliapp.com/emoji/list/hand/ '手的表情符号')

☚☛☜☝☞☟✌𓂬𓂩𓂨𓂷𓂭𓂝𓂡𓂦𓃈⍝

### 宗教和文化符号 [列表视图](https://cn.piliapp.com/symbol/culture/)

包括来自伊斯兰教、道教、锡克教、犹太教、佛教、印度教和古埃及文化的符号

☤☥☪☫☬☮☭☯☸☽☾♰♱⚚✡卍﷽✵ૐ𓉴𓉸۞࿊۩࿅࿉࿈

### 基督教十字架符号 [列表视图](https://cn.piliapp.com/symbol/cross/)

包括关键的基督教图标，如拉丁十字架、东正教十字架和凯尔特十字架，每种都反映了不同的传统。

✝✞✠☦✙✜✟✚☧☨☩✛✢⛪†⚜

### 图腾符号 [列表视图](https://cn.piliapp.com/symbol/totem/)

𖣐𖠦𖡷𖢅𖣴𖣔𖣓𖤌𖣘𖣁𖢘𖤍༒༄༅࿓༗𓊈𓊉𓊆𓊇⩨⩩༚༛༜༝༞༟࿎࿏𖡼⋱⋰𖡻𖡟𖡤𖡥𖡦𖡧𖡽𖣢𖤗𖤝𖤞𖤫𖤼𖥂𖥅𖥑𖥓𖥖𖥗𖥘𖥙𖥚𖥟𖥤⩨⩩𒀺𒀹𒍻𒑠𒁹𒀸𒅂𒁂𒇹𒌋𒑱𒌍𒉼𒈱𒈝𒈞𒐆𒆳𒍞𒑴𒀭𒀮𒀯𒆙𒆜𒉺𒌑𒀽𒆸𒇻𒁈𒇔𒐦𒐤𒐪𒐬𒐮𒐰𒀱𒅒𒋲𒂭𒇫𒍟𒅄ဪ꧅𒐫

## 动物符号[列表视图](https://cn.piliapp.com/symbol/animals/)[emoji](https://cn.piliapp.com/emoji/list/animals/ '动物表情符号')展开

𖠊𖢥𖠌𖠍𖠐𖠅ଳꙮ𖠽𖡉𖢘𖠑𖠒𖡒𖢂𖤖

𓃥𓃠𓃰𓃱𓃯𓃭𓃸𓃵𓃗𓃘𓃙𓃟𓄀𓄁𓄂𓄃

𓆇𓆈𓆉𓆌𓆏𓆗𓆘𓆙𓆚𓆐𓆑𓆒𓆓𓆔𓆕𓆖

𓆣𓆤𓆥𓆦𓆧𓆨𓆛𓆜𓆝𓆞𓆟𓆠𓆡𓆢

𓄿𓅀𓅁𓅂𓅃𓅄𓅅𓅆𓅇𓅈𓅉𓅊𓅋𓅌𓅍𓅎

## 星号符号

### 天空中的星星 [列表视图](https://cn.piliapp.com/symbol/star/)[emoji](https://cn.piliapp.com/emoji/list/star/ '星星的符号')

★☆✡✦✧⌑✩✪⍟❂✫✬✭✮✯✰☪⚝⛤⛥⛦⛧⍣⋆≛𓇼𓇻𓇽꙳⭑⭒𖤐𖣔⟡⟢⟣⊹

### 星号符号 [列表视图](https://cn.piliapp.com/symbol/asterisk/)

\*∗٭※⁂⁎⁑⁕⃰⊛☸❋✱✲✳✴✵✶✷✸✹✺𖡽𖥤𖥟𖡟𖤗✽⧆＊﹡＊†‡𒀭𒀯𒄬

### 花卉符号 [列表视图](https://cn.piliapp.com/symbol/flower/)[emoji](https://cn.piliapp.com/emoji/list/flower/ '花表情符號')

✻✼✾✿❀❁❃❇❈❉❊✢✣✤✥⚜ꕥ𓇬⚘𓆸𓆹𓆼𓇊𓇚𓇕𓇗𓋇𓁙𓁋֍֎𓆭𓆰𓆱𓇋𓇑𓇛𓇟𓇣𖧷ꕤ𑁍᪥𖠁𖠇𖤣𖤥𖡗𖢨𖣶𖦞𖧧༗𖣂𖠺𖠻𓄟𖢔𐌙𐊵𐡘𐡙𐡚꧁꧂𒂭

## 箭头符号[列表视图](https://cn.piliapp.com/symbol/arrow/)[emoji](https://cn.piliapp.com/emoji/list/arrow/ '箭头表情符號')

上下左右的箭头、风向、指南针符号

⬅⬆⬇⮕⬈⬉⬊⬋⬌⬍⭠⭡⭢⭣⭤⭥⮂⮃⮐⮑⬎⬏⬐⬑⬱⬳⬸⬿⭅⭆↕↖↗↘↙↚↛↜↝↞↟↠↡↢↣↤↥↦↧↨↩↪↫↬↭↮↯↰↱↲↳↴↶↷↸↹↺↻⟲⟳↼↽↾↿⇀⇁⇂⇃⇄⇅⇆⇇⇈⇉⇊⇋⇌⇍⇎⇏⇕⇖⇗⇘⇙⇚⇛⇜⇝⇞⇟⇠⇡⇢⇣⇤⇥⇦⇧⇨⇩⇪⌅⌆⌤⏎▶☇☈➔➘➙➚➛➜➝➞➟➠➡➢➣➤➥➦➧➨➩➪➫➬➭➮➯➱➲➳➴➵➶➷➸➹➺➻➼➽➾⤴⤵↵↓↔←→↑⍇⍈⍐⍗⇫⇬⇭⇮⇯⇰⇱⇲⇳⇴⇵⇶⇷⇸⇹⇺⇻⇼⇽⇾⇿⇐⇑⇒⇓⇔𖣫𖤂⬀⬁⬂⬃⬄

## 图形符号

### 方形符号 [列表视图](https://cn.piliapp.com/symbol/square/)

∎⊞⊟⊠⊡▀▁▂▃▄▅▆▇█▉▊▋▋▌▍▎▏▐░▒▓▔■□▢▣▤▥▦▧▨▩▪▫▬▭▮▯◘◙◚◛◧◨◩◪◫❏❐❑❒❘❙❚▖▗▘▙▚▛▜▝▞▟◰◱◲◳𖣯⿴⿻

### 三角形符号 [列表视图](https://cn.piliapp.com/symbol/triangle/)

⊿▲△▴▵▶▷▸▹►▻▼▽▾▿◀◁◂◃◄◅◢◣◤◥◬◭◮◸◹◺◿∇∆𓇮⫷⫸

### 线段符号 展开 [列表视图](https://cn.piliapp.com/symbol/line/)

单线框、双线框

ˍ‐⎯‒―⎺⎻⎼⎽‗‖─━│┃┄

⌌⌍⌎⌏⌜⌝⌞⌟┌┍┎┏┐┑┒┓

═║╒╓╔╔╔╕╕╖╖╗╗╘╙╚

╱╲╳╭╮╯╰◜◝◞◟◠◡⌈⌊⌉

### 随机线条 [列表视图](https://cn.piliapp.com/symbol/random-lines/)

𖡎☡ ༘෴؄ᔐᔑᔓᔕ𖡬𖢦꧖𖨂𖦹⎛⎝⎞⎠𖣢𖥷𖣸𖣿𖤩𖥾𖨘𓂃𓂅𓏲𓍱𓍲𓎆⦚⌇

### 圆形符号 [列表视图](https://cn.piliapp.com/symbol/circle/)

⊖⊘⊙⊚⊛⊜⊝◉○◌◍◎●◐◑◒

### 其他形状 [列表视图](https://cn.piliapp.com/symbol/other-shapes/)

包括菱形、五边形和椭圆形。

⬟⬠⭓⭔☖☗◊⟠⧫⋄◆◇◈❖⬬⬭⬮⬯⎔⎚⌑▰▱⬢⬡⬣

### X 标记符号 [列表视图](https://cn.piliapp.com/symbol/x-mark/)

×☓✕✖❌❎⨉⨯☐☒✗✘Χχꭓᚷ⊗⨷ₓˣ𒉽⛌⛒⛝

### 项目清单 [列表视图](https://cn.piliapp.com/symbol/bullet-point/)[emoji](https://cn.piliapp.com/emoji/list/bullet-point/ '要点')

•·∙⊙⊚⊛◉○◌◍◎●◘◦。☉

### 盲文符号 [列表视图](https://cn.piliapp.com/symbol/braille/)

⣿⠿⠾⠽⠼⠻⠺⠹⠸⠷⠶⠵⠴⠳⠲⠱

## 数学符号

### 常用数学符号 [列表视图](https://cn.piliapp.com/symbol/math/)

加, 减去, 乘, 除以, 无限的符号. 1/1000 和 1/10000 符号.

±∓×÷∶…≤≥≠√∛∜∑∏∞♾ℕℤℚℝℂαβγδεμφπσθ∈∉∅∫∬∭∮∯∂∆∇≈≅≡≟∝∠‘’∪∩∼∣≃≄≇°⋅⊗⊕⊙⟨⟩∨∧¬∴∵⇒⇔∀∃∄⊆⊇⊂⊃∖℘ρX̄↔→↦⇥⊥⊤⊧⊢¦!∎ℑℍ𝔸⊖⌈⌉″′↟\[\]□■⌃⋀⋁∁⇔⅋∦∧∨≦≧≪≫≬≭≰≱≲≳⊀⊁◅‰‱

### 分数符号 [列表视图](https://cn.piliapp.com/symbol/fraction/)

½⅓⅔¼¾⅕⅖⅗⅘⅙⅚⅐⅛⅜⅝⅞⅑⅒↉⅟

### 下标和上标 [列表视图](https://cn.piliapp.com/symbol/subscript-superscript/)

⁰¹²³⁴⁵⁶⁷⁸⁹⁺⁻⁼⁽⁾ⁿ

### PI 符号 [列表视图](https://cn.piliapp.com/symbol/pi/)

Ππ𝜫𝝅𝝥𝝿𝞟𝞹Пп∏ϖ∐ℼㄇ兀

## 语言符号

### 希腊符号 [列表视图](https://cn.piliapp.com/symbol/greek/)

ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρςστυφχψω

### 拉丁字母 [列表视图](https://cn.piliapp.com/symbol/latin/)

包含带重音的字母和常用国际标点符号。主要字母表：法语、西班牙语、德语和冰岛语。

ÆÁÂÂÀÅÃÄÇÐÉÊÈËÍÎÌÏÑÓÔÒØÕÖÞÚÛÙÜÝáâæàåãäçéêèðëíîìïñóôòøõößþúûùüýÿ

### 拉丁扩展字符 [列表视图](https://cn.piliapp.com/symbol/latin-extended/)

主要字母表：南非荷兰语、加泰罗尼亚语、捷克语、世界语、匈牙利语、拉脱维亚语、立陶宛语、马耳他语、北萨米语、波兰语、塞尔维亚语、克罗地亚语、斯洛伐克语、斯洛文尼亚语、索布语、土耳其语和威尔士语。

ĀāĂăĄąĆćĈĉĊċČčĎď

### 字母字体 展开 [编辑器](https://cn.piliapp.com/cool-text/)

轮廓字体 / 气泡文本 / 草书字母 / 小型大写字母 / 旧英文文本 / 颠倒文本 / 方形文本 / ...

ⒶⒷⒸⒹⒺⒻⒼⒽⒾⒿⓀⓁⓂⓃⓄⓅ

ᴀʙᴄᴅᴇғɢʜɪᴊᴋʟᴍɴᴏᴘ

𝓐𝓑𝓒𝓓𝓔𝓕𝓖𝓗𝓘𝓙𝓚𝓛𝓜𝓝𝓞𝓟

🅐🅑🅒🅓🅔🅕🅖🅗🅘🅙🅚🅛🅜🅝🅞🅟

𝔸𝔹ℂ𝔻𝔼𝔽𝔾ℍ𝕀𝕁𝕂𝕃𝕄ℕ𝕆ℙ

🄰🄱🄲🄳🄴🄵🄶🄷🄸🄹🄺🄻🄼🄽🄾🄿

🅰🅱🅲🅳🅴🅵🅶🅷🅸🅹🅺🅻🅼🅽🅾🅿

𝕬𝕭𝕮𝕯𝕰𝕱𝕲𝕳𝕴𝕵𝕶𝕷𝕸𝕹𝕺𝕻

𝐀𝐁𝐂𝐃𝐄𝐅𝐆𝐇𝐈𝐉𝐊𝐋𝐌𝐍𝐎𝐏

𝘈𝘉𝘊𝘋𝘌𝘍𝘎𝘏𝘐𝘑𝘒𝘓𝘔𝘕𝘖𝘗

### 中国符号

㊊㊋㊌㊍㊎㊏㊐㊑㊒㊓㊔㊕㊖㊗㊘㊙㊚㊛㊜㊝㊞㊟㊠㊡㊢㊣㊤㊥㊦㊧㊨㊩㊪㊫㊬㊭㊮㊯㊰

### 日文字符 展开 [列表视图](https://cn.piliapp.com/symbol/kana/)[emoji](https://cn.piliapp.com/emoji/list/japan/ '日本文化表情符號')

标准和小写平假名，以及标准、小写和半角片假名

ぁあぃいぅうぇえぉおかがきぎくぐ

ゝゞァアィイゥウェエォオカガキギ

㋐㋑㋒㋓㋔㋕㋖㋗㋘㋙㋚㋛㋜㋝㋞㋟

㋿㍻㍼㍽㍾◌゙◌゚゛゜・ーヽヾヿ㍐㍿

### 韩文符号 展开 [列表视图](https://cn.piliapp.com/symbol/korean/)

ㄱㄲㄳㄴㄵㄶㄷㄸㄹㄺㄻㄼㄽㄾㄿㅀ

ﾡﾢﾣﾤﾥﾦﾧﾨﾩﾪﾫﾬﾭﾮﾯﾰ

㈀㈁㈂㈃㈄㈅㈆㈇㈈㈉㈊㈋㈌㈍㈎㈏

₩㉿ 〮 〯ー

## 货币符号[列表视图](https://cn.piliapp.com/symbol/currency/)[emoji](https://cn.piliapp.com/emoji/list/money/ '貨幣表情符號')

欧元，美元，美分，英镑，韩元，中国人民币和日元。

$¢€£¥₩₽₹¤₱₦ƒ₮৲৳₨௹฿៛₪₫₭₲₴₵﷼≋₿ŁÐ₳$$$$$$$</description><guid isPermaLink="true">https://692.cloudns.be/post/te-shu-fu-hao.html</guid><pubDate>Fri, 07 Mar 2025 07:03:20 +0000</pubDate></item><item><title>用Actionsflow在Github上免费部署Rsshub</title><link>https://692.cloudns.be/post/yong-Actionsflow-zai-Github-shang-mian-fei-bu-shu-Rsshub.html</link><description>
## 正文

Rsshub是一个很棒的工具，把很多知名或不知名的网页数据通通统一为RSS 格式，堪称中文互联网的 W3C. 但是官方推荐的部署方式是Docker 部署，对于大多数轻量使用的用户来说有点重，所以这里介绍一种免费，轻量，按需使用的部署方式，利用Actionsflow部署在 GitHub 的 Actions 上。

Actionsflow是一个基于 Github Actions 上的 IFTTT/Zapier 的开源替代，使用 Github Actions 的配置格式来配置你需要的工作流, 更多关于 Actionsflow 的使用可以看我的另一篇文章介绍,或者官方文档

比如我自己在用的一个工作流就是监控豆瓣车组的一些我需要的关键词，如果有提到关键词的帖子，那么发送一个 telegram 消息给我，配置如下：

```yaml
on:
  rsshub:
    path:
      - path: /douban/group/669481
        query:
          filter_case_sensitive: false
          filter_title: 罐头|狗粮|爱肯拿|渴望|姐妹们快|牛奶|牛肉|羊肉|来伊份岩烧|来伊份面包|烤箱|生鲜|螺蛳粉|米诺|果酸|杏仁酸|鸡蛋|大米|薅|cr海盐|洗头膏|崔娅蓬松|洗鼻|橙
          filterout_title: 求|转|求购|交流|已购|专楼|蒙牛|伊利|讨论|华为|停车|代拍|完|分装|意向|拼单|删|一元
jobs:
  ifttt:
    name: Make a Request to telegram
    runs-on: ubuntu-latest
    steps:
      - name: Send a telegram message
        uses: appleboy/telegram-action@v0.1.0
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            &lt;b&gt;${{ on.rsshub.outputs.title}}&lt;/b&gt;
            &lt;a href='${{on.rsshub.outputs.link}}'&gt;${{on.rsshub.outputs.description}}&lt;/a&gt;
          format: html
          disable_web_page_preview: true
```

&gt; 配置来自[这里](https://github.com/theowenyoung/actionsflow-workflow/blob/main/workflows/rsshub.yml)

接下来介绍下如何部署：）

&gt; 因为 rsshub 这个 trigger 没有内置在 Actionsflow 里，所以按照官方的教程初始化之后，需要主动安装下@actionsflow/trigger-rsshub这个 trigger

1.  使用[这个](https://github.com/actionsflow/actionsflow-workflow-default/generate)链接用 Actionsflow 的默认模板创建一个新的 GitHub 项目，一个典型的 Actionsflow 项目长这样：

```shell
    ├── .github
    │   └── workflows
    │       └── actionsflow.yml
    ├── .gitignore
    ├── README.md
    └── workflows
    │   └── rss.yml
    │   └── webhook.yml
    └── package.json
```

2.  clone 你刚创建的项目到本地

```shell
git clone git@github.com:&lt;your-github-username&gt;/&lt;repo-name&gt;
```

3.  在本地编辑`.github/workflows/actionsflow.yml`文件，取消`schedule`的注释
    
4.  安装[@actionsflow/trigger-rsshub](https://github.com/theowenyoung/actionsflow-trigger-rsshub)
    

```shell
npm i @actionsflow/trigger-rsshub
```

5.  在`workflows/`文件夹创建你自己的 workflow 文件

&gt; workflow 的写法和 rsshub trigger 的用法清参考官方文档[Actionsflow Workflow Syntax](https://actionsflow.github.io/docs/workflow/), [Actionsflow rsshub trigger](https://github.com/theowenyoung/actionsflow-trigger-rsshub)

&gt; 可以参考[这里](https://actionsflow.github.io/docs/actions/)列出的 常用 Github Action，以及这个 [Actionsflow 的 Awesome 项目](https://github.com/actionsflow/awesome-actionsflow)

示例(`/workflow/rsshub.yml`)：

```yaml
  on:
    rsshub:
      path: /smzdm/keyword/女装
  jobs:
    print:
      name: Print
      runs-on: ubuntu-latest
      steps:
        - name: Print Outputs
          env:
            title: ${{on.rsshub.outputs.title}}
            description: ${{on.rsshub.outputs.description}}
            link: ${{on.rsshub.outputs.link}}
          run: |
            echo title: $title
            echo description: $description
            echo link: $link
```

6.  保存并提交你的文件到 Github
$$$$$$$</description><guid isPermaLink="true">https://692.cloudns.be/post/yong-Actionsflow-zai-Github-shang-mian-fei-bu-shu-Rsshub.html</guid><pubDate>Thu, 06 Mar 2025 17:10:12 +0000</pubDate></item><item><title>Actionsflow 项目使用教程</title><link>https://692.cloudns.be/post/Actionsflow%20-xiang-mu-shi-yong-jiao-cheng.html</link><description>## Actionsflow 项目使用教程

[actionsflow The free Zapier/IFTTT alternative for developers to automate your workflows based on Github actions 项目地址: https://gitcode.com/gh\_mirrors/ac/actionsflow](https://gitcode.com/gh_mirrors/ac/actionsflow/?utm_source=replace_article_gitcode&amp;index=top&amp;type=card&amp; 'actionsflow')

### 1\. 项目的目录结构及介绍

Actionsflow 项目的目录结构如下：

```
├── .github
│   └── workflows
│       └── actionsflow.yml
├── .gitignore
├── README.md
├── workflows
│   ├── rss.yml
│   └── webhook.yml
└── package.json
```

#### 目录结构介绍

-   **.github/workflows/actionsflow.yml**: 这是 Actionsflow 的主要配置文件，定义了工作流的执行计划和触发条件。
-   **.gitignore**: 用于指定 Git 忽略的文件和目录。
-   **README.md**: 项目的主文档，包含项目的介绍、使用方法和贡献指南。
-   **workflows/**: 该目录包含具体的工作流配置文件，如 `rss.yml` 和 `webhook.yml`，每个文件定义了一个特定的工作流。
-   **package.json**: 项目的依赖管理文件，包含项目的元数据和依赖包。

### 2\. 项目的启动文件介绍

Actionsflow 项目的启动文件主要是 `.github/workflows/actionsflow.yml`。这个文件定义了 Actionsflow 的工作流执行计划和触发条件。

#### 启动文件内容

```yaml
on: schedule: - cron: '*/15 * * * *' jobs: request: name: Make a HTTP Request runs-on: ubuntu-latest steps: - name: Make a HTTP Request uses: actionsflow/axios@v1 with: url: https://hookb.in/VGPzxoWbdjtE22bwznzE method: POST body: | [ 'link':'$[[ on.rss.outputs.link ]]', 'title': '$[[ on.rss.outputs.title ]]', 'content':'&lt;&lt;&lt;$[[ on.rss.outputs.contentSnippet ]]&gt;&gt;&gt;' ]
```

#### 启动文件介绍

-   **on**: 定义触发工作流的事件，这里使用的是 `schedule` 事件，表示每 15 分钟执行一次。
-   **jobs**: 定义工作流的任务，这里只有一个任务 `request`，用于发送 HTTP 请求。
-   **steps**: 定义任务的具体步骤，这里使用 `actionsflow/axios@v1` 动作来发送 HTTP 请求。

### 3\. 项目的配置文件介绍

Actionsflow 项目的配置文件主要包括 `.github/workflows/actionsflow.yml` 和 `workflows/` 目录下的各个工作流配置文件。

#### 配置文件内容

##### .github/workflows/actionsflow.yml

```yaml
on: schedule: - cron: '*/15 * * * *' jobs: request: name: Make a HTTP Request runs-on: ubuntu-latest steps: - name: Make a HTTP Request uses: actionsflow/axios@v1 with: url: https://hookb.in/VGPzxoWbdjtE22bwznzE method: POST body: | [ 'link':'$[[ on.rss.outputs.link ]]', 'title': '$[[ on.rss.outputs.title ]]', 'content':'&lt;&lt;&lt;$[[ on.rss.outputs.contentSnippet ]]&gt;&gt;&gt;' ]
```

##### workflows/rss.yml

```yaml
on: rss: url: https://hnrss.org/newest?points=300&amp;count=3 jobs: request: name: Make a HTTP Request runs-on: ubuntu-latest steps: - name: Make a HTTP Request uses: actionsflow/axios@v1 with: url: https://hookb.in/VGPzxoWbdjtE22bwznzE method: POST body: | [ 'link':'$[[ on.rss.outputs.link ]]', 'title': '$[[ on.rss.outputs.title ]]', 'content':'&lt;&lt;&lt;$[[ on.rss.outputs.contentSnippet ]]&gt;&gt;&gt;' ]
```

#### 配置文件介绍

-   **.github/workflows/actionsflow.yml**: 定义了工作流的执行计划和触发条件，使用 `schedule` 事件每 15 分钟执行一次。
-   **workflows/rss.yml**: 定义了一个 RSS 订阅的工作流，当 RSS 订阅有新内容时，触发 HTTP 请求。

通过这些配置文件，Actionsflow 可以自动化地执行各种任务，如发送 HTTP 请求、处理 RSS 订阅等。

[actionsflow The free Zapier/IFTTT alternative for developers to automate your workflows based on Github actions 项目地址: https://gitcode.com/gh\_mirrors/ac/actionsflow](https://gitcode.com/gh_mirrors/ac/actionsflow/?utm_source=replace_article_gitcode&amp;index=bottom&amp;type=card&amp; 'actionsflow')$$$$$$$</description><guid isPermaLink="true">https://692.cloudns.be/post/Actionsflow%20-xiang-mu-shi-yong-jiao-cheng.html</guid><pubDate>Thu, 06 Mar 2025 16:56:50 +0000</pubDate></item><item><title>CF优选IP和反代IP的方法总结</title><link>https://692.cloudns.be/post/CF-you-xuan-IP-he-fan-dai-IP-de-fang-fa-zong-jie.html</link><description>blog.onetwoone.eu.org 

Cloudflare的workers和pages搭建的免费vpn节点简单好用，但要保证速度我们必须优化CF的IP和反代CF的IP。现把内容总结如下：

1.寻找优选IP的方法：

网站直接获取法：简单、方便，但使用的人太多，可能质量较一般。
https://stock.hostmonit.com/CloudFlareYes

https://monitor.gacjie.cn/page/cloudflare/ipv4.html

http://ip.flares.cloud/

https://github.com/ymyuuu/IPDB（这个可不但有CF的IP，还有反代CF的IP）

从白嫖哥获得：https://zip.baipiao.eu.org

电报群组获得： https://t.me/cf_push

从某项目获得：https://github.com/ymyuuu/IPDB

以上两种方法是从其它大佬直接获取得到，方法简单、直接，非常适合小白朋友。

3.fofa寻找个性化的CF的IP或反代IP：
https://fofa.info/

这是一种非常好用的方法，利用它能够寻找自己想要的任何IP，方便准确。对小白也不算难。完全可以根据自己的要求，设置筛选条件，比如服务器、端口、国家、地区、城市、IP段等。

3.1筛选CF的IP或CDN例子：
~~~md
server='cloudflare' &amp;&amp; port='443' &amp;&amp; country='SG' &amp;&amp; (asn='13335' || asn='209242')
~~~
&gt; server=='cloudflare' &amp;&amp; # 查找使用 Cloudflare 作为服务器的 IP 地址 port=='443' &amp;&amp; # 查找开放端口 443（HTTPS）的服务器 country=='SG' &amp;&amp; # 查找位于新加坡（SG）的服务器 (asn=='13335' || # ASN 编号为 13335 或 asn=='209242') # ASN 编号为 209242

3.2筛选反向代理CF的IP例子：
~~~md
server=='cloudflare' &amp;&amp; port=='80' &amp;&amp; header='Forbidden' &amp;&amp; country=='SG' &amp;&amp; asn!='13335' &amp;&amp; asn!='209242' 
~~~
&gt; 上方语法的详细说明： 
&gt; server=='cloudflare' &amp;&amp; # 使用 Cloudflare 作为服务器 port=='80' &amp;&amp; # 端口号为 80（HTTP）header='Forbidden' &amp;&amp; # 返回 HTTP 头信息中包含 'Forbidden' country=='SG' &amp;&amp; # 位于新加坡（SG） asn!='13335' &amp;&amp; # 排除 ASN 编号为 13335 的 IP 地址（Cloudflare 官方 IP） asn!='209242' # 排除 ASN 编号为 209242 的 IP 地址（Cloudflare 官方 IP）关于经常使用的ASN号： Cloudflare常用到的ASN号：AS13335 AS209242 Cloudflare其它ASN号：AS394536 AS14789 AS139242 AS133877	AS132892 AS395747 AS203898 AS202623 阿里云常用的：ASN45102 甲骨文主要的：ASN31898 搬瓦工常用的：ASN25820

&gt; 注意：以上语法不是固定不变的，如country可换成city或region，相应的对象也要改变。如region=”California”，region=”Tokyo”，但不能region=”JP”。

server=='cloudflare' &amp;&amp; port=='80' &amp;&amp; header='Forbidden' &amp;&amp; country=='SG' &amp;&amp; asn=='31898' 比如添加上asn='31898',可以筛选新加坡甲骨文反代CF的服务器。

4.本地优选和测速工具

Github：https://github.com/XIU2/CloudflareSpeedTest
 这个工具自带Cloudflare官方IP库，大约有5955个CF的ip,只要一运行就会自动扫出前10个优选IP。但它没有反代IP库哈，另外它还是一个好用的测速工具。

其它可能用到的工具

IP批量查询：https://reallyfreegeoip.org/bulk
IP归属地查询：https://ipdata.co/
临时邮箱：https://temp-mail.org/；https://tempmail.plus

$$$$$$$</description><guid isPermaLink="true">https://692.cloudns.be/post/CF-you-xuan-IP-he-fan-dai-IP-de-fang-fa-zong-jie.html</guid><pubDate>Thu, 27 Feb 2025 19:24:34 +0000</pubDate></item><item><title>注册serv00的新方法，测试非常好</title><link>https://692.cloudns.be/post/zhu-ce-serv00-de-xin-fang-fa-%EF%BC%8C-ce-shi-fei-chang-hao.html</link><description> 1、打开谷歌云：
&gt; [点击前往](https://accounts.google.com/v3/signin/identifier?continue=https%3A%2F%2Fconsole.cloud.google.com%2F&amp;followup=https%3A%2F%2Fconsole.cloud.google.com%2F&amp;ifkv=AeZLP9-0IQSq05xeTMuW_HTDcW960bBquuu4bZzNRa3Y1JiTKCW9rsteltb7DqePmwSSYv987u3_oA&amp;osid=1&amp;passive=1209600&amp;service=cloudconsole&amp;flowName=GlifWebSignIn&amp;flowEntry=ServiceLogin&amp;dsh=S-550021044%3A1734529949831903&amp;ddm=1) {:target='_blank'}


2. 点击右上角的“激活Cloud Shell”

![Image](https://github.com/user-attachments/assets/8b0e4d23-9383-431b-b007-f9b1e34b4cb7)

3、下方终端会打开：

![Image](https://github.com/user-attachments/assets/70b8d04c-a3f4-485e-844e-b417a4cb52ac)



4、我们不需要申请任何vps，它只临时运行大约15-30分钟左右就关闭了
输入命令：
docker run -p 8080:80 dorowu/ubuntu-desktop-lxde-vnc
5、等命令运行完打开终端右上的“网页预览”，会弹出如下界面，然后点击左下角，选择Ineernet-Firefox Web Brower

![Image](https://github.com/user-attachments/assets/fea652e7-0ff6-4d2d-9658-960a89c46448)




这火狐浏览器中，打开serv00的注册页面，多刷新几次，就可以注册成功了$$$$$$$</description><guid isPermaLink="true">https://692.cloudns.be/post/zhu-ce-serv00-de-xin-fang-fa-%EF%BC%8C-ce-shi-fei-chang-hao.html</guid><pubDate>Thu, 27 Feb 2025 18:07:12 +0000</pubDate></item><item><title>gitblog博客安装教程</title><link>https://692.cloudns.be/post/gitblog-bo-ke-an-zhuang-jiao-cheng.html</link><description># 新建一个仓库gitblog

## 新建仓库G_KEY

### a. 新生成一个[github token](https://github.com/settings/tokens)，
New personal access token (classic)
scope勾选： repo、workflow、gist、user，
生成后复制到一个安全的地方存储后面备用；
### b. 配置[Repository secrets](https://github.com/humyna/gitblog/settings/secrets/actions)
settings--&gt;secrets and variables--&gt;Actions--&gt;new repository secrets,名称为G_KEY,值就是上面的github token

&gt; 注意：这个G_KEY会在后面的gene_readme.yml文件中使用

------
下载yihong0618开源的[这个项目](https://github.com/yihong0618/gitblog)，将其中除了feed.xml的文件全部copy到第一步项目中。
a. BACKUP中只保留.gitkeep空文件，
b. 修改gene_readme.yml文件，L11中分支名由master改成main;前面的G_KEY在这个文件配置(secrets.G_KEY)。
c. 修改main.py文件，搜索master,改成main
4.修改[workflow permissions](https://github.com/humyna/gitblog/settings/actions)
![image](https://github.com/user-attachments/assets/7123d98b-ed94-4d2f-a4bd-4be9fed90701)

如果不修改，在提交issue后，github actions执行报错
![image](https://github.com/user-attachments/assets/f8baf3ea-22ca-4571-8007-f12d06f84fbc)

5.初始化一些[labels](https://github.com/humyna/gitblog/labels)

至此基于issues个人博客就搭建完成了，可以愉快地写作了。

注意：提交issues，选择lable，github actions会被触发执行。$$$$$$$</description><guid isPermaLink="true">https://692.cloudns.be/post/gitblog-bo-ke-an-zhuang-jiao-cheng.html</guid><pubDate>Wed, 26 Feb 2025 17:03:56 +0000</pubDate></item><item><title>CloudFlare优选汇总</title><link>https://692.cloudns.be/post/CloudFlare-you-xuan-hui-zong.html</link><description>https://cf.090227.xyz维护的优选官方域名
cf.090227.xyz#三网自适应分流官方优选
ct.090227.xyz#电信官方优选
cmcc.090227.xyz#移动官方优选

------
# 常用的优选官方域名
www.visa.com.hk
www.gov.se
www.visa.com.tw
icook.hk
time.is
skk.moe
icook.tw
japan.com
www.gov.ua
malaysia.com
russia.com
ip.sb
www.gco.gov.qa
singapore.com
shopify.com
www.visa.com.sg
www.visakorea.com
www.visa.co.jp
&gt; [更多](https://raw.githubusercontent.com/6889692/wiki/refs/heads/gh-pages/domain.txt)

![Image](https://github.com/user-attachments/assets/97c78606-2885-4da7-adb0-e247b59f2cf5)
------

## 第三方维护的优选官方域名（未备注出处的为未知）
cf.0sm.com
bestcf.onecf.eu.org
cf.877771.xyz
xn--b6gac.eu.org
yx.887141.xyz
cfip.1323123.xyz
cfip.xxxxxxxx.tk
achk.cloudflarest.link
acjp2.cloudflarest.link
cf.zhetengsha.eu.org

![Image](https://github.com/user-attachments/assets/ab690eee-13b9-411d-aac3-87e54d0ba98d)

------
# 第三方维护的优选反代域名
cdn-all.xn--b6gac.eu.org
cdn.xn--b6gac.eu.org
cdn-b100.xn--b6gac.eu.org 
bestproxy.onecf.eu.org
ts.hpc.tw
proxy.xxxxxxxx.tk    #失效
edgetunnel.anycast.eu.org #失效

&gt; [扫描工具](https://www.nslookup.io/domains/cdn-all.xn--b6gac.eu.org/dns-records/)

![Image](https://github.com/user-attachments/assets/c762af76-3c68-4d30-a700-164310293c88)

------

## 第三方维护的优选官方IP的API
https://ipdb.api.030101.xyz/?type=bestcf&amp;country=true
https://addressesapi.090227.xyz/CloudFlareYes
https://addressesapi.090227.xyz/ip.164746.xyz
第三方维护的优选反代IP的API
https://ipdb.api.030101.xyz/?type=bestproxy&amp;country=true

------

## 更多优选内容可自行查看
https://cf.090227.xyz
https://ipdb.api.030101.xyz
https://monitor.gacjie.cn/page/cloudflare/cname.html
https://ip.164746.xyz
https://stock.hostmonit.com/CloudFlareYes

------

&gt; HTTP支持端口：80，8080，8880，2052，2082，2086，2095；
&gt; HTTPS支持端口：443，2053，2083，2087，2096，8443。

------
## 我精选的反代IP：
47.76.37.57 #HK
38.55.97.137 #HK
162.159.152.2 #US
162.159.153.2 #US
172.67.33.106 #CT-HK
162.159.135.170 #CM-HK
![image](https://github.com/user-attachments/assets/404f49fc-02af-4069-be19-640e2b827e38)
$$$$$$$</description><guid isPermaLink="true">https://692.cloudns.be/post/CloudFlare-you-xuan-hui-zong.html</guid><pubDate>Wed, 26 Feb 2025 17:03:07 +0000</pubDate></item><item><title>Markdown语法总览</title><link>https://692.cloudns.be/post/Markdown-yu-fa-zong-lan.html</link><description>markdown测试页面
============

[](https://blog.meekdai.com/ '首页')[](https://github.com/Meekdai/meekdai.github.io/issues/4 'Issue')[](https://blog.meekdai.com/post/markdown-ce-shi-ye-mian.html '切换主题')

这是一个markdown格式的测试页面，也是个人经常会使用的格式记录。

Static Badge
------------

```md
![](https://img.shields.io/badge/参考页面-orange)
```

[![](https://camo.githubusercontent.com/d807703912e2569aebe8076458386a85b94e6d197e973b1326b2084f4d51c249/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2545352538462538322545382538302538332545392541312542352545392539442541322d6f72616e6765)](https://camo.githubusercontent.com/d807703912e2569aebe8076458386a85b94e6d197e973b1326b2084f4d51c249/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2545352538462538322545382538302538332545392541312542352545392539442541322d6f72616e6765)

标题
--

```md
# H1
## H2
### H3
#### H4
```

强调
--

```md
今天的天气真好啊，可以吃**冰激凌**吗？
```

今天的天气真好啊，可以吃**冰激凌**吗？

删除横线
----

```md
今天的天气真好啊，可以吃~~冰激凌~~吗？
```

今天的天气真好啊，可以吃~冰激凌~吗？

列表
--

```md
1. 看电视
2. 吃饭
3. 睡觉

- 乒乓球
- 篮球
- 羽毛球
```

1.  看电视
2.  吃饭
3.  睡觉

*   乒乓球
*   篮球
*   羽毛球

代码高亮
----

\`\`\`python  
import request  
import time

time.sleep\_ms(1000)  
print('Hello World')  
\`\`\`

```python
import request
import time

time.sleep_ms(1000)
print('Hello World')
```

链接
--

```md
[我的博客](https://meekdai.github.io)
```

[我的博客](https://meekdai.github.io/)

图片
--

```md
![这是我的头像PNG](https://fjvi.github.io/note/favicon.ico)
![这是我的头像SVG](https://fjvi.github.io/note/favicon.ico)
```

![这是我的头像PNG](https://fjvi.github.io/note/favicon.ico)

[![这是我的头像SVG](https://fjvi.github.io/note/favicon.ico)](https://fjvi.github.io/note/favicon.ico)

表格
--

```md
| Table Heading 1 | Table Heading 2 | Center align    | Right align     | Table Heading 5 |
| :-------------- | :-------------- | :-------------: | --------------: | :-------------- |
| Item 1          | Item 2          | Item 3          | Item 4          | Item 5          |
| Item 1          | Item 2          | Item 3          | Item 4          | Item 5          |
| Item 1          | Item 2          | Item 3          | Item 4          | Item 5          |
```

| Table Heading 1 | Table Heading 2 | Center align | Right align | Table Heading 5 |
| :-- | :-- | :-: | --: | :-- |
| Item 1 | Item 2 | Item 3 | Item 4 | Item 5 |
| Item 1 | Item 2 | Item 3 | Item 4 | Item 5 |
| Item 1 | Item 2 | Item 3 | Item 4 | Item 5 |

水平线
---

```md
---
我在2个水平线中间
***
```

* * *

我在2个水平线中间

* * *

引用
--

```md
&gt; 落霞与孤鹜齐飞，秋水共长天一色。《滕王阁序》--王勃 
```

&gt; 落霞与孤鹜齐飞，秋水共长天一色。《滕王阁序》--王勃

对比
--

```diff
+ this text is highlighted in green
- this text is highlighted in red
```

```
\`\`\`diff
+ this text is highlighted in green
- this text is highlighted in red
\`\`\`

```

字体颜色
----

```css
Some text in green! 123
```

```
\`\`\`CSS
Some text in green! 123
\`\`\`

```

```p4
Some text in blue! 123
```

```mint
Some text in blue with additional keyword highlighting! 123
```

```
\`\`\`P4
Some text in blue! 123
\`\`\`

\`\`\`Mint
Some text in blue with additional keyword highlighting! 123
\`\`\`

```

```json
Some text highlighted in red! 123
```

```
\`\`\`JSON
Some text highlighted in red! 123
\`\`\`

```

HTML tricks
-----------

Monospaced text

```html
&lt;samp&gt;Monospaced text&lt;/samp&gt;
```

* * *

Underlined text

```html
&lt;ins&gt;Underlined text&lt;/ins&gt;
```

* * *

&lt;table role='table'&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Boxed text&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

```html
&lt;table&gt;&lt;tr&gt;&lt;td&gt;Boxed text&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
```

* * *

Item summary with dropdown

Dropdown content (supports **markdown** ~yay!~)

```json
{
  awesome: 'true'
}
```

```
&lt;details&gt;
&lt;summary&gt;Item summary with dropdown&lt;/summary&gt;

Dropdown content (supports \*\*markdown\*\* ~~yay!~~)

\`\`\`json
{
  awesome: 'true'
}
\`\`\`
&lt;/details&gt;

```

* * *

**_Italic-bold_**

```
__*Italic-bold*__

```

* * *

SuperscriptTM

```
Superscript&lt;sup&gt;TM&lt;/sup&gt;

```

* * *

Superscript-italic_tm_

```
Superscript-italic&lt;sup&gt;*tm*&lt;/sup&gt;

```

* * *

Subscriptx

```
Subscript&lt;sub&gt;x&lt;/sub&gt;

```

* * *

Subscript-bold**min**

```
Subscript-bold&lt;sub&gt;**min**&lt;/sub&gt;

```

* * *

~**_Italic-bold-strikethrough_**~

```
~~__*Italic-bold-strikethrough*__~~

```

参考
--

更多GitHub Markdown 语法参考：

1.  [https://github.com/Olwiba/Kickass-markdown/](https://github.com/Olwiba/Kickass-markdown/)
2.  [https://docs.github.com/zh/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax](https://docs.github.com/zh/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax)

❤️ 转载文章请注明出处，谢谢！❤️$$$$$$$</description><guid isPermaLink="true">https://692.cloudns.be/post/Markdown-yu-fa-zong-lan.html</guid><pubDate>Wed, 26 Feb 2025 17:01:59 +0000</pubDate></item><item><title>Gmeek快速上手</title><link>https://692.cloudns.be/post/Gmeek-kuai-su-shang-shou.html</link><description>Gmeek快速上手
==========

[](https://blog.meekdai.com/ '首页')[](https://github.com/Meekdai/meekdai.github.io/issues/39 'Issue')[](https://blog.meekdai.com/post/Gmeek-kuai-su-shang-shou.html '切换主题')

[Gmeek](https://github.com/Meekdai/Gmeek) 一个博客框架，超轻量级个人博客模板，完全基于`Github Pages` 、 `Github Issues` 和 `Github Actions`，可以称作`All in Github`。不需要本地部署，从搭建到写作，只需要18秒，2步搭建好博客，第3步就是写作。

一、安装
----

Important

安装及其简单，但是也要认真看下面的步骤，一步一步来。

1.  【创建仓库】点击[通过模板创建仓库](https://github.com/new?template_name=Gmeek-template&amp;template_owner=Meekdai)，建议仓库名称为`XXX.github.io`，其中`XXX`为你的github用户名。
    
2.  【启用Pages】在仓库的设置`Settings`中`Pages-&gt;Build and deployment-&gt;Source`下面选择`Github Actions`。
    
3.  【开始写作】打开一篇issue，开始写作，并且**必须**添加一个`标签Label`（至少添加一个），再保存issue后会自动创建博客内容，片刻后可通过[https://XXX.github.io](https://xxx.github.io/) 访问（可进入Actions页面查看构建进度）。
    
4.  【手动全局生成】这个步骤只有在修改`config.json` 文件或者出现奇怪问题的时候，需要执行。
    

```p4
通过Actions-&gt;build Gmeek-&gt;Run workflow-&gt;里面的按钮全局重新生成一次
```

Note

网友制作的视频教程：[https://www.bilibili.com/video/BV1GM4m1m7ZD/](https://www.bilibili.com/video/BV1GM4m1m7ZD/)

二、配置文件
------

Tip

按照安装步骤成功搭建好后，就可以阅读下面的内容修改配置文件啦。  
注意修改配置文件后一定要手动全局生成一次，不然会报错。  
如果对`json`格式不熟悉，建议先简单学习一下。

`config.json` 文件就是配置文件，在创建的仓库内可以找到，对应修改为自己的即可。

```js
{
    'title':'Meekdai',
    'subTitle':'童话是一种生活态度，仅此而已。',
    'avatarUrl':'https://github.githubassets.com/favicons/favicon.svg',
    'GMEEK_VERSION':'last'
}
```

以上是必须的字段，下面是可以自定义字段的描述，可以选择加入到`config.json`中。

```js
'displayTitle':'Meekdai',
'homeUrl':'http://blog.meekdai.com',
'faviconUrl':'https://github.githubassets.com/favicons/favicon.svg',
'email':'meekdai@163.com',
'startSite':'02/16/2015',
'filingNum':'浙ICP备20023628号',
'onePageListNum':15,
'singlePage':['about'],
'iconList':{'music':'M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8Zm8-6.5a6.5 6.5 0 1 0 0 13 6.5 6.5 0 0 0 0-13Z'},
'exlink':{'music':'https://music.meekdai.com'},
'commentLabelColor':'#006b75',
'yearColorList':['#bc4c00', '#0969da', '#1f883d', '#A333D0'],
'i18n':'CN',
'UTC':8,
'themeMode':'manual',
'dayTheme':'light',
'nightTheme':'dark_colorblind',
'urlMode':'pinyin',
'style':'',
'script':'',
'head':'',
'allHead':'',
'indexStyle':'',
'indexScript':'',
'showPostSource':1,
'rssSplit':'sentence',
'bottomText':'转载请注明出处',
'ogImage':'https://cdn.jsdelivr.net/gh/Meekdai/meekdai.github.io/logo64.jpg',
'primerCSS':'&lt;link href='https://mirrors.sustech.edu.cn/cdnjs/ajax/libs/Primer/21.0.7/primer.css' rel='stylesheet' /&gt;',
'needComment':0,
```

Caution

最后一行配置末尾不需要逗号，其他行末尾都需要逗号（英文逗号）

| **配置参数** | **说明** |
| --- | --- |
| title | 【必填】博客标题 |
| subTitle | 【必填】博客描述&amp;自述 |
| avatarUrl | 【必填】博客头像 |
| GMEEK\_VERSION | 【必填】Gmeek版本，一般写`last`也可以用具体tag版本 |
| displayTitle | 用于头像后面的标题展示，如果和`title`一致则不用添加 |
| homeUrl | 博客的主页地址，自定义域名时需要配置 |
| faviconUrl | 页面的favicon地址，如果和avatarUrl一致则不用添加 |
| email | 用于自动提交仓库时用，不添加也可以 |
| startSite | 用于页面底部显示网站运行天数 |
| filingNum | 用于页面底部显示备案信息 |
| onePageListNum | 用于首页每页展示的文章数量 |
| singlePage | 自定义独立页面，例如`about`或者`link`等 |
| iconList | 用于定义singlePage按钮展示的[SVG图标](https://primer.style/foundations/icons/#16px) (16px)，`about`和`link`内置无需定义 |
| exlink | 用于自定义首页右上角圆形按钮到外部链接功能，按钮图标定义在iconList中 |
| commentLabelColor | 用于自定义显示评论数量标签的颜色 |
| yearColorList | 用于自定义显示不同年份标签的颜色 |
| i18n | 用于定义博客语言，目前支持`EN`/`CN`/`RU` |
| UTC | 用于定义[时区](https://en.wikipedia.org/wiki/List_of_UTC_offsets) |
| themeMode | 用于定义主题模式，默认为`manual`，也可选择`fix`[详细说明](https://blog.meekdai.com/post/%E3%80%90Gmeek-jin-jie-%E3%80%91-liang-an-zhu-ti-pei-zhi-fang-shi.html) |
| dayTheme | 用于定义[亮主题](https://github.com/settings/appearance) |
| nightTheme | 用于定义[暗主题](https://github.com/settings/appearance) |
| urlMode | 用于定义文章链接生成模式，目前支持`pinyin`/`issue`/`ru_translit` |
| style | 用于自定义文章页CSS |
| script | 用于自定义文章页JavaScript |
| head | 用于自定义文章页head内容 |
| allHead | 用于自定义所有页面head内容 |
| indexStyle | 用于自定义首页CSS |
| indexScript | 用于自定义首页JavaScript |
| showPostSource | 设置为1则在文章页显示issue链接按钮，设置为0则不显示 |
| rssSplit | 设置RSS输出的截断符号，默认`sentence`为第一句话，可配置其他特殊符号 |
| bottomText | 用于设置文章页面右下角显示的内容 |
| ogImage | 用于设置Open Graph协议展示的图片 |
| primerCSS | 用于设置primer.css的CDN地址，默认使用[南科大](https://mirrors.sustech.edu.cn/cdnjs/ajax/libs/Primer/21.0.7/primer.css) |
| needComment | 用于设置是否需要评论功能，1开启评论，0关闭 |

三、常见问题
------

### 1\. 搭建不成功

多半是没有按照安装步骤来，其实搭建就这2步，不要自己乱点乱设置，就不会有问题。

*   案例一：[Meekdai/Gmeek#14](https://github.com/Meekdai/Gmeek/issues/14)
*   案例二：[Meekdai/Gmeek#18](https://github.com/Meekdai/Gmeek/issues/18)
*   案例二：[Meekdai/Gmeek#20](https://github.com/Meekdai/Gmeek/issues/20)

### 2\. Actions执行失败

修改了`config.json`配置文件后，需要全局生成。另外`label`标签没有打会出现这个问题。  
建议通过Actions-&gt;build Gmeek-&gt;Run workflow-&gt;里面的按钮全局重新生成一次

*   案例一：[Meekdai/Gmeek#1](https://github.com/Meekdai/Gmeek/issues/1)
*   案例二：[Meekdai/Gmeek#10](https://github.com/Meekdai/Gmeek/issues/10)

### 3\. 导入以前的文章

如需修改发布时间，可以在文章最后一行添加如下代码。里面的时间是采用时间戳的形式，可以用如下[网站](https://tool.lu/timestamp)转换。

```html
&lt;!-- ##{'timestamp':1490764800}## --&gt;
```

### 4\. 自定义单篇文章参数

自定义单篇文章页面的`style`和`script`

```html
&lt;!-- ##{'style':'&lt;style&gt;#postBody{font-size:20px}&lt;/style&gt;'}## --&gt;
```

```html
&lt;!-- ##{'script':'&lt;script async src='//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js'&gt;&lt;/script&gt;'}## --&gt;
```

### 5\. 多种自定义参数

可同时一起添加多种自定义参数：

```html
&lt;!-- ##{'script':'&lt;script async src='//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js'&gt;&lt;/script&gt;','style':'&lt;style&gt;#postBody{font-size:20px}&lt;/style&gt;','timestamp':1490764800}## --&gt;
```

### 6\. 自定义全局文章参数

添加全局文章页面的`style`和`script`，在`config.json`文件中添加

```js
'style':'&lt;style&gt;#postBody{font-size:20px}&lt;/style&gt;',
'script':'&lt;script async src='//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js'&gt;&lt;/script&gt;',
```

### 7\. 置顶博客文章

只需要`Pin issue`后，手动全局生成一次即可。

### 8\. utteranc报错

如果在评论里面登录后评论报错，可直接按照提示安装`utteranc app`即可

```
Error: utterances is not installed on xxx/xxx.github.io. If you own this repo, install the app. Read more about this change in the PR.

```

### 9\. 删除文章

只需要`Close issue`或者`Delete issue`后，再手动全局生成一次即可。

四、进阶教程
------

Gmeek的可定制化功能非常高，下面的链接是一些更加高级的设置教程，还有插件的使用等。  
[https://meekdai.github.io/tag.html#Gmeek](https://meekdai.github.io/tag.html#Gmeek)

❤️ 转载文章请注明出处

$$$$$$$</description><guid isPermaLink="true">https://692.cloudns.be/post/Gmeek-kuai-su-shang-shou.html</guid><pubDate>Wed, 26 Feb 2025 14:43:04 +0000</pubDate></item><item><title>about</title><link>https://692.cloudns.be/about.html</link><description>`Gmeek-html&lt;iframe id='contentFrame' src='https://fjvi.github.io/sq/' frameborder='0' style='border: none;' width='100%'  height='1080px' &gt;&lt;/iframe&gt;`
$$$$$$$</description><guid isPermaLink="true">https://692.cloudns.be/about.html</guid><pubDate>Wed, 26 Feb 2025 14:06:12 +0000</pubDate></item><item><title>link</title><link>https://692.cloudns.be/link.html</link><description>`Gmeek-html&lt;iframe id='contentFrame' src='https://fjvi.github.io/sq/' frameborder='0' style='border: none;' width='100%'  height='1080px' &gt;&lt;/iframe&gt;`$$$$$$$</description><guid isPermaLink="true">https://692.cloudns.be/link.html</guid><pubDate>Wed, 12 Mar 2025 08:30:17 +0000</pubDate></item></channel></rss>